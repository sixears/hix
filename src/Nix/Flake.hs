{-# LANGUAGE UnicodeSyntax #-}
module Nix.Flake
  ( FlakePkg
  , FlakePkgs
  , flakeShow
  , forMX86_64Pkg
  , forMX86_64Pkg_
  , forX86_64Pkg
  , pkg
  , ver
  , x86_64
  , x86_64_
  ) where

import Prelude ( undefined )

import Base1T

-- aeson -------------------------------

import Data.Aeson ( FromJSON(parseJSON), defaultOptions, eitherDecodeStrict',
                    fieldLabelModifier, genericParseJSON, withObject, (.:),
                    (.:?) )

import Data.Aeson.Types as AesonTypes

-- aeson-plus --------------------------

import Data.Aeson.Error ( AesonError, AsAesonError(_AesonError),
                          throwAsAesonError )

-- base --------------------------------

import Data.Maybe   ( fromMaybe )
import Data.Tuple   ( uncurry )
import GHC.Generics ( Generic )

-- containers --------------------------

import Data.Map.Strict qualified as Map

-- fpath -------------------------------

import FPath.AbsDir           ( AbsDir )
import FPath.AsFilePath       ( AsFilePath, filepath )
import FPath.Error.FPathError ( AsFPathError(_FPathError) )

-- lens --------------------------------

import Control.Lens.At     ( at )
import Control.Lens.Getter ( (^.) )
import Control.Lens.Lens   ( Lens' )

-- log-plus ----------------------------

import Log ( Log, logIO )

-- logging-effect ----------------------

import Control.Monad.Log ( LoggingT, MonadLog, Severity(Informational) )

-- mockio-log --------------------------

import MockIO.Log ( HasDoMock, MockIOClass, doMock, logResult, mkIOL, mkIOLME,
                    mkIOLMER )

-- mockio-plus -------------------------

import MockIO.Process           ( Íô´ )
import MockIO.Process.MLCmdSpec ( MLCmdSpec, ToMLCmdSpec, mock_value )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError ( AsCreateProcError(_CreateProcError) )
import MonadIO.Error.ProcExitError   ( AsProcExitError(_ProcExitError) )
import MonadIO.Process.ExitStatus    ( ExitStatus, evOK )

-- more-unicode ------------------------

import Data.MoreUnicode.Lens ( tindex )

-- mtl ---------------------------------

import Control.Monad.Except ( throwError )
import Control.Monad.Reader ( MonadReader, runReaderT )

-- text --------------------------------

import Data.Text          ( concat, pack, unpack )
import Data.Text.Encoding ( encodeUtf8 )

-- textual-plus ------------------------

import TextualPlus qualified

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Paths qualified as Paths

import Nix.Types ( Arch, Pkg, Ver, pkgRE, x86_64Linux )

--------------------------------------------------------------------------------

customOptions ‚à∑ AesonTypes.Options
customOptions =
  let dropLeadingUnderscore ('_' : s) = s
      dropLeadingUnderscore s         = s
  in  defaultOptions { fieldLabelModifier = dropLeadingUnderscore }

------------------------------------------------------------

data FlakePkg = FlakePkg { _description :: ùïÑ ùïã
                         , _pkg         :: Pkg
                         , _ver         :: ùïÑ Ver
                         , _type        :: ùïã
                         }
  deriving (Generic, Show)

pkg ‚à∑ Lens' FlakePkg Pkg
pkg = lens _pkg (\ fp p ‚Üí (fp { _pkg = p }))

ver ‚à∑ Lens' FlakePkg (ùïÑ Ver)
ver = lens _ver (\ fp v ‚Üí (fp { _ver = v }))

instance FromJSON FlakePkg where
  parseJSON = withObject "FlakePkg" $
    \ v ‚Üí do
          name ‚Üê v .: "name"
          (pkg,ver) ‚Üê TextualPlus.parseT pkgRE "FlakePkg" (unpack name)
          FlakePkg ‚ä≥ v .:? "description"
                       ‚äµ return pkg ‚äµ return ver
                       ‚äµ v .: "type"

------------------------------------------------------------

newtype FlakePkgs = FlakePkgs { _packages :: Map.Map Arch (Map.Map Pkg FlakePkg) }
  deriving (Generic, Show)

instance FromJSON FlakePkgs where
  parseJSON = genericParseJSON customOptions

----------------------------------------

-- packages ‚à∑ Lens' FlakePkgs (Map.Map Arch (Map.Map Pkg FlakePkg))
-- packages = lens _packages (\ p f ‚Üí (FlakePkgs { _packages = f }))
packages ‚à∑ Lens' FlakePkgs (Map.Map Arch (Map.Map Pkg FlakePkg))
packages = lens _packages (\ p f ‚Üí (FlakePkgs { _packages = f }))

xx ‚à∑ Arch ‚Üí Lens' FlakePkgs (ùïÑ (Map.Map Pkg FlakePkg))
xx a =
  let pkgs ‚à∑ Lens' FlakePkgs (Map.Map Arch (Map.Map Pkg FlakePkg))
      pkgs = lens _packages (\ p f ‚Üí (FlakePkgs { _packages = f }))
  in  pkgs ‚àò (at a)

yy ‚à∑ Arch ‚Üí Lens' FlakePkgs (Map.Map Pkg FlakePkg)
yy a =
  let pkgs ‚à∑ Lens' FlakePkgs (Map.Map Arch (Map.Map Pkg FlakePkg))
      pkgs = lens _packages (\ p f ‚Üí (FlakePkgs { _packages = f }))
      f1 ‚à∑ Map.Map Arch (Map.Map Pkg FlakePkg) ‚Üí Map.Map Pkg FlakePkg
      f1 fps = fromMaybe Map.empty $ a `Map.lookup` fps
      f2 ‚à∑ Map.Map Arch (Map.Map Pkg FlakePkg) ‚Üí Map.Map Pkg FlakePkg ‚Üí Map.Map Arch (Map.Map Pkg FlakePkg)
      f2 fps new = Map.insert a new fps
  in  pkgs ‚àò (lens f1 f2 {- (\ map ‚Üí Map.findWithDefault _ _ map) -})

----------------------------------------

x86_64 ‚à∑ FlakePkgs ‚Üí ùïÑ (Map.Map Pkg FlakePkg)
-- x86_64 (f ‚à∑ FlakePkgs) = (f ‚ä£ packages) ‚ä£ at x86_64Linux
x86_64 f = (f ‚ä£ packages) ‚ä£ at x86_64Linux

-- x86_64_ ‚à∑ Lens' FlakePkgs (ùïÑ (Map.Map Pkg FlakePkg))
-- x86_64_ = xx x86_64Linux
x86_64_ ‚à∑ Lens' FlakePkgs (Map.Map Pkg FlakePkg)
x86_64_ = yy x86_64Linux

----------------------------------------

{-| apply a function to each named `FlakePkg` in x86_64-linux packages -}
forX86_64Pkg ‚à∑ FlakePkgs ‚Üí (Pkg ‚Üí FlakePkg ‚Üí Œ±) ‚Üí [Œ±]
forX86_64Pkg fps f = case x86_64 fps of
  ùïµ pkg_map ‚Üí (uncurry f) ‚ä≥ (Map.toList pkg_map)
  ùïπ         ‚Üí []

----------------------------------------

{-| monadic apply a function to each named `FlakePkg` in x86_64-linux
    packages -}
forMX86_64Pkg ‚à∑ Monad Œ∑ ‚áí FlakePkgs ‚Üí (Pkg ‚Üí FlakePkg ‚Üí Œ∑ Œ±) ‚Üí Œ∑ [Œ±]
forMX86_64Pkg fps f = case x86_64 fps of
  ùïµ pkg_map ‚Üí forM (Map.toList pkg_map) (uncurry f)
  ùïπ         ‚Üí return []

----------------------------------------

{-| monadic apply a function to each named `FlakePkg` in x86_64-linux
    packages; unify unit returns -}
forMX86_64Pkg_ ‚à∑ Monad Œ∑ ‚áí FlakePkgs ‚Üí (Pkg ‚Üí FlakePkg ‚Üí Œ∑ Œ±) ‚Üí Œ∑ ()
forMX86_64Pkg_ fps f = forMX86_64Pkg fps f ‚™º return ()

----------------------------------------

flakeShowTestInput ‚à∑ ùïã
flakeShowTestInput =
  concat [ "{ \"packages\": {"
         , "    \"x86_64-linux\": {"

         , "      \"binutils\": {"
         , "        \"description\": \"Tools for manipulating binaries\","
         , "        \"name\": \"binutils-wrapper-2.38\","
         , "        \"type\": \"derivation\""
         , "      },"

         , "      \"get-iplayer-config\": {"
         , "        \"name\": \"get-iplayer-config\","
         , "        \"type\": \"derivation\""
         , "      },"

         , "      \"graph-easy\": {"
         , "        \"description\": \"Render/convert graphs\","
         , "        \"name\": \"perl5.34.1-Graph-Easy-0.76\","
         , "        \"type\": \"derivation\""
         , "      }"

         , "    }"
         , "  }"
         , "}"
         ]

{-| nix flake show #flake -}
flakeShow ‚à∑ ‚àÄ Œµ Œ¥ Œº .
            (MonadIO Œº, HasDoMock Œ¥, MonadReader Œ¥ Œº,
             AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
             AsProcExitError Œµ, AsAesonError Œµ, Printable Œµ,
             MonadError Œµ Œº,
             MonadLog (Log MockIOClass) Œº) ‚áí
            AbsDir ‚Üí Œº (ùîº ùïä FlakePkgs)
flakeShow d = do
  let mock_set ‚à∑ MLCmdSpec ùïã ‚Üí MLCmdSpec ùïã
      mock_set = let mock_val ‚à∑ (ExitStatus, ùïã) = (evOK, flakeShowTestInput)
                 in  (& mock_value ‚ä¢ mock_val)
      args     = ["flake", "show", "--json", pack $ d ‚´• filepath]
  (_,flake_show) ‚Üê Íô´ (Paths.nix, args, mock_set)

  return $ eitherDecodeStrict' (encodeUtf8 flake_show)

-- that's all, folks! ----------------------------------------------------------
