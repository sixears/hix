{-# LANGUAGE DeriveAnyClass        #-}
{-# LANGUAGE ImportQualifiedPost   #-}
{-# LANGUAGE LambdaCase            #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE RankNTypes            #-}
{-# LANGUAGE TypeApplications      #-}
{-# LANGUAGE UnicodeSyntax         #-}

{-| nyx program to manage local configurations -}
module Nix.Nyx
  ( main
  ) where

import Base1T

import Debug.Trace ( trace, traceShow )
import Prelude     ( Int, Integral, Num, (*) )

import Natural qualified

-- aeson -------------------------------

import Data.Aeson ( FromJSON(parseJSON), defaultOptions, eitherDecodeStrict',
                    fieldLabelModifier, genericParseJSON, withObject, (.:),
                    (.:?) )

-- aeson-plus --------------------------

import Data.Aeson.Error ( AesonError, AsAesonError(_AesonError),
                          throwAsAesonError )

-- base --------------------------------

import Data.List qualified

import Control.Applicative ( optional )
import Data.Foldable       ( Foldable )
import Data.Function       ( flip )
import Data.Functor        ( Functor )
import Data.List           ( any, filter, maximum, repeat, transpose, unzip3,
                             zip, zipWith )
import Data.Traversable    ( traverse )
import GHC.Generics        ( Generic )

-- containers --------------------------

import Data.Map.Strict qualified as Map

-- data-textual ------------------------

import Data.Textual ( Parsed(Malformed, Parsed), Textual(textual) )

-- deepseq -----------------------------

import Control.DeepSeq ( NFData )

-- fpath -------------------------------

import FPath.Abs              ( Abs(AbsD, AbsF) )
import FPath.AbsDir           ( AbsDir, absdir )
import FPath.AbsFile          ( AbsFile, absfile )
import FPath.AppendableFPath  ( AppendableFPath, AppendableFPathD,
                                AppendableFPathF, (‚´ª) )
import FPath.AsFilePath       ( AsFilePath, filepath )
import FPath.Basename         ( basename )
import FPath.Dir              ( Dir, DirAs )
import FPath.Dirname          ( dirname )
import FPath.DirType          ( DirType )
import FPath.Error.FPathError ( AsFPathError(_FPathError) )
import FPath.File             ( File )
import FPath.Parseable        ( parse, readM )
import FPath.PathComponent    ( PathComponent )
import FPath.RelDir           ( RelDir, reldir )
import FPath.RelFile          ( RelFile, relfile )
import FPath.ToDir            ( ToDir(toDir) )
import Text.Read              ( Read )

-- lens --------------------------------

import Control.Lens.Each   ( each )
import Control.Lens.Fold   ( (^..) )
import Control.Lens.Getter ( Getting, view )
import Control.Lens.Setter ( over )
import Control.Lens.Tuple  ( _1, _2, _3 )

-- log-plus ----------------------------

import Log ( Log, logIO )

-- logging-effect ----------------------

import Control.Monad.Log ( LoggingT, MonadLog, Severity(Informational) )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock(NoMock) )
import MockIO.IOClass ( HasIOClass, IOClass(IORead, IOWrite), ioClass )

-- mockio-log --------------------------

import MockIO.Log ( HasDoMock, MockIOClass, doMock, logResult, mkIOL, mkIOLME,
                    mkIOLMER )

-- mockio-plus -------------------------

import MockIO.Directory             ( lsdir' )
import MockIO.File                  ( FExists(FExists), fexists )
import MockIO.FStat                 ( stat' )
import MockIO.Process               ( Íô´ )
import MockIO.Process.MLCmdSpec     ( MLCmdSpec, ToMLCmdSpec, mock_value )
import MockIO.Process.OutputDefault ( OutputDefault )

-- monaderror-io -----------------------

import MonadError.IO.Error ( throwUserError )

-- monadio-plus ------------------------

import MonadIO                       ( say, warn )
import MonadIO.Base                  ( getArgs )
import MonadIO.Cwd                   ( getCwd )
import MonadIO.Error.CreateProcError ( AsCreateProcError(_CreateProcError) )
import MonadIO.Error.ProcExitError   ( AsProcExitError(_ProcExitError) )
import MonadIO.FPath                 ( pResolve, pResolveDir )
import MonadIO.FStat                 ( isDir )
import MonadIO.Process.ExitInfo      ( ExitInfo )
import MonadIO.Process.ExitStatus    ( ExitStatus, evOK )
import MonadIO.Process.MakeProc      ( MakeProc )
import MonadIO.Process.OutputHandles ( OutputHandles )
import MonadIO.Process.ToMaybeTexts  ( ToMaybeTexts )
import MonadIO.User                  ( getUserName', homePath )

-- more-unicode ------------------------

import Data.MoreUnicode.Monad ( (‚ãô) )

-- mtl ---------------------------------

import Control.Monad.Except ( throwError )
import Control.Monad.Reader ( MonadReader, runReaderT )

-- natural -----------------------------

import Natural ( length, replicate )

-- optparse-applicative ----------------

import Options.Applicative.Builder     ( argument, auto, command, idm, info,
                                         metavar, progDesc, strArgument,
                                         subparser )
import Options.Applicative.Help.Pretty ( align, empty, fillSep, text, vcat,
                                         (<$$>) )
import Options.Applicative.Types       ( Parser )

-- optparse-plus -----------------------

import OptParsePlus ( readT, toDocTs, (‚äû) )

-- parsers -----------------------------

import Text.Parser.Char ( string )

-- safe --------------------------------

import Safe ( maximumDef )

-- stdmain -----------------------------

import StdMain            ( stdMain )
import StdMain.UsageError ( AsUsageError(_UsageError), UsageFPathIOError,
                            UsageParseAesonFPPIOError, UsageParseFPProcIOError,
                            throwUsage )

-- text --------------------------------

import Data.Text          ( concat, intercalate, pack, unpack )
import Data.Text.Encoding ( encodeUtf8 )
-- textual-plus ------------------------

import TextualPlus qualified

import TextualPlus.Error.TextualParseError ( AsTextualParseError(_TextualParseError),
                                             TextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Paths qualified as Paths

import Nix.Flake ( FlakePkg, FlakePkgs, flakeShow, forMX86_64Pkg,
                   forMX86_64Pkg_, forX86_64Pkg, pkg, ver, x86_64, x86_64_ )
import Nix.Types ( Arch, Pkg, Ver, pkgRE )

--------------------------------------------------------------------------------

class HomogenousTuple Œ± where
  type family TupleItem Œ±
  tupleToList ‚à∑ Œ± ‚Üí [TupleItem Œ±]

instance HomogenousTuple (Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±) = Œ±
  tupleToList (a0,a1) = [a0,a1]

instance HomogenousTuple (Œ±,Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±,Œ±) = Œ±
  tupleToList (a0,a1,a2) = [a0,a1,a2]

------------------------------------------------------------

{- Given a list of lines, each being a list of columns; pad out the columns
   to provide an aligned display.

   The columns are padded out according to the input `pads` argument.  Widths
   are set according to the widest input column.  Columns for which no justify
   value is provided are left unmolested.
-}
data Justify = JustifyLeft | JustifyRight

-- provide fixed width args, and ignore args, and centrejustify args

columnify ‚à∑ [Justify] ‚Üí [[ùïã]] ‚Üí [[ùïã]]
columnify pads zs =
  let pad_t ‚à∑ ‚Ñ§ ‚Üí ùïã ‚Üí ùïã
      pad_t (unNegate ‚Üí (SignMinus,n)) t = replicate @ùïã (n ‚äñ length t) ' ' ‚äï t
      pad_t (unNegate ‚Üí (SignPlus, n)) t = t ‚äï replicate @ùïã (n ‚äñ length t) ' '

      col_widths = transpose zs & each ‚äß (\ ys ‚Üí maximumDef 0 $ length ‚ä≥ ys)
      xx JustifyLeft  = 1
      xx JustifyRight = (-1)
      col_widths' = (\(x,y) ‚Üí fromIntegral y * xx x) ‚ä≥ zip pads col_widths
  in
    (^.. each) ‚àò zipWith pad_t (col_widths' ‚äï repeat 0) ‚ä≥ zs

------------------------------------------------------------

newtype ProfileName = ProfileName { unProfileName :: PathComponent }

userProfileName ‚à∑ ‚àÄ Œµ Œº .
              (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
              Œº ProfileName
userProfileName = ProfileName ‚ä≥ (getUserName' ‚â´ parse)

userProfileNameRelDir ‚à∑ ‚àÄ Œµ Œº .
                        (MonadIO Œº,
                         AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
                        Œº RelDir
userProfileNameRelDir = (fromList ‚àò pure ‚àò unProfileName) ‚ä≥ userProfileName

------------------------------------------------------------

data Mode = ModeListPkgs (ùïÑ ùïã)
          | ModeListConfigs

instance Printable Mode where

{-
instance Textual Mode where
  textual = string "list-packages"    ‚ã´ (ModeListPkgs ‚äµ _)
          ‚à§ string "list-config-dirs" ‚ã´ pure ModeListConfigs
-}

-- XXX This should be a sub-command or similar

newtype Options = Options { mode :: Mode }

----------------------------------------

{-| cmdline options parser -}
parseOptions ‚à∑ Parser Options
parseOptions = Options ‚ä≥ subparser
  (—é [ command "list-packages"    (info (ModeListPkgs ‚ä≥ optional (strArgument idm))
                                 (progDesc "list packages"))
     , command "list-config-dirs" (info (pure ModeListConfigs)
                                 (progDesc "list config directories"))
     ])

--  argument readT (metavar "MODE")

------------------------------------------------------------

{-| top dir to look for config flakes -}
configTop ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí Œº AbsDir
configTop = homePath [reldir|nix/|]

----------------------------------------

{-| top dir to look for config flakes -}
configDefault ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
                Œº AbsDir
configDefault = (‚´ª [reldir|default/|]) ‚ä≥ configTop

----------------------------------------

{-| top dir where nix profiles are stored -}
profilesTop ‚à∑ (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
              Œº AbsDir
profilesTop =
  ([absdir|/nix/var/nix/profiles/per-user/|] ‚´ª) ‚ä≥ userProfileNameRelDir

----------------------------------------

{-| append a profile name to a dir to find a profile dir -}
profileAppend ‚à∑ AbsDir ‚Üí ProfileName ‚Üí AbsDir
profileAppend top = (top ‚´ª) ‚àò fromList ‚àò pure ‚àò unProfileName

----------------------------------------

{-| find a profile dir from a profile name, assuming the use of `profilesTop` -}
profileDir ‚à∑ (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
             ProfileName ‚Üí Œº AbsDir
profileDir = (profilesTop ‚ä≤) ‚àò flip profileAppend

----------------------------------------

{-| A variant of `lsdir'` that just returns the subdirectories.  For complex
    type issues that I do not grok; it only works for `AbsDir`. -}
subdirs ‚à∑ ‚àÄ Œµ œâ Œº .
          (MonadIO Œº,
           AsFPathError Œµ,AsIOError Œµ,Printable Œµ,MonadError Œµ Œº,HasCallStack,
           HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
          Severity ‚Üí AbsDir ‚Üí DoMock ‚Üí Œº [AbsDir]
subdirs sv d k = fst ‚ä≥‚ä≥ snd ‚ä≥ lsdir' @_ @AbsFile sv d k

{-| list of config directories; that is, dirs in `configTop` that contain a
    @flake.nix@ -}
allConfigDirs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [AbsDir]
allConfigDirs = do
  config_top  ‚Üê configTop
  let has_flake ‚à∑ (MonadIO Œº,
                   AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                   HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                  AbsDir ‚Üí Œº ùîπ
      has_flake d  = do
        (fs,_) ‚Üê lsdir' @_ @AbsFile Informational d NoMock
        return $ any (\ (fn, _) ‚Üí [relfile|flake.nix|] ‚â° basename fn) fs
  subdirs Informational config_top NoMock ‚â´ filterM has_flake

{-| list of config flakes -}

allConfigs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [AbsFile]
allConfigs = do
  config_top  ‚Üê configTop
  let subdirs_ d = subdirs Informational d NoMock
      fexists_ f = (FExists ‚â°) ‚ä≥ fexists Informational FExists f NoMock
  proto_flakes ‚Üê (‚´ª [relfile|flake.nix|]) ‚ä≥‚ä≥ subdirs_ config_top
  (return proto_flakes) ‚â´ filterM fexists_

----------------------------------------


namePkgVers ‚à∑ FlakePkgs ‚Üí [(ùïã,ùïã,ùïã)]
namePkgVers pkgs =
  let
    pkgVer ‚à∑ FlakePkg ‚Üí (ùïã,ùïã)
    pkgVer fp = (toText $ fp ‚ä£ pkg, maybe "" toText $ fp ‚ä£ ver)

    pfx ‚à∑ Œ± ‚Üí (Œ≤,Œ≥) ‚Üí (Œ±,Œ≤,Œ≥)
    pfx x (y,z) = (x,y,z)
  in
    Map.foldMapWithKey (\ p fp ‚Üí [pfx (toText p) (pkgVer fp)]) $ pkgs ‚ä£ x86_64_

----------------------------------------

natNeg ‚à∑ ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
natNeg x y = if x ‚â• y then x - y else 0

(‚äñ) ‚à∑ ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
(‚äñ) = natNeg

data NumSign = SignPlus | SignMinus

unNegate ‚à∑ ‚Ñ§ ‚Üí (NumSign,‚Ñï)
unNegate n | n < 0     = (SignMinus, fromIntegral $ abs n)
           | otherwise = (SignPlus,  fromIntegral n)

padT ‚à∑ ‚Ñ§ ‚Üí ùïã ‚Üí ùïã
padT (unNegate ‚Üí (SignMinus,n)) t = replicate @ùïã (n ‚äñ length t) ' ' ‚äï t
padT (unNegate ‚Üí (SignPlus, n)) t = t ‚äï replicate @ùïã (n ‚äñ length t) ' '

{- | If f is a file type then if it is a dir on disc convert it else issue a
     warning and use the base dir; if f is a dir, use that. -}

flakeDirFromAbs ‚à∑ (MonadIO Œº,
                   AsFPathError Œµ, AsIOError Œµ, AsUsageError Œµ, MonadError Œµ Œº)‚áí
                  ùïã ‚Üí Œº AbsDir
flakeDirFromAbs f = do
  pResolve f ‚â´ \ case
    AbsD d ‚Üí return d
    AbsF f' ‚Üí isDir f' ‚â´ \ case
      ùïø ‚Üí return $ toDir f'
      ùï± ‚Üí if basename f' ‚â° [relfile|flake.nix|]
           then return $ f' ‚ä£ dirname
           else throwUsage $ [fmtT|cannot use '%T' as flake|] f

myMain ‚à∑ (HasCallStack, AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ,
          AsCreateProcError Œµ, AsProcExitError Œµ, AsAesonError Œµ, Printable Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain do_mock opts = flip runReaderT do_mock $
  case mode opts of
    ModeListPkgs f -> do
      flake_dir ‚Üê case f of
        ùïπ   ‚Üí configDefault
        ùïµ f ‚Üí flakeDirFromAbs f
      say flake_dir
      allConfigs ‚â´ mapM_ say

      xs ‚Üê flakeShow flake_dir ‚â´ either throwAsAesonError (return ‚àò namePkgVers)

      let xs' = tupleToList ‚ä≥ xs
      forM_ (columnify [JustifyLeft, JustifyLeft, JustifyRight] xs')
            (say ‚àò intercalate "\t")
      return 0

{-| program main entry point -}
main ‚à∑ MonadIO Œº ‚áí Œº ()
main = do
-- ?add logging options
-- show all configs (as option)
  let progDesc =
        -- the values of list_packages, etc., will be wrapped as necessary
        let list_packages = fillSep [ toDocTs [ "list the available packages of a config"] ]
        in vcat [ "manage nix configs for ~home installation\n\nModes:"
                , empty <$$> text "list-packages" ‚äû align list_packages ]
  getArgs ‚â´ stdMain progDesc parseOptions (myMain @UsageParseAesonFPPIOError)

-- that's all, folks! ----------------------------------------------------------
