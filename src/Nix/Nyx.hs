-- add Handle for default profile (~/.nix-profile)
-- add nix-install, nix-search equivs

{-# LANGUAGE ImportQualifiedPost   #-}
{-# LANGUAGE LambdaCase            #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE RankNTypes            #-}
{-# LANGUAGE TypeApplications      #-}
{-# LANGUAGE UnicodeSyntax         #-}

{-| nyx program to manage local configurations -}
module Nix.Nyx
  ( main
  ) where

import Base1T

import Prelude ( (*) )

-- aeson-plus --------------------------

import Data.Aeson.Error ( AsAesonError )

-- base --------------------------------

import Control.Applicative ( optional )
import Data.Foldable       ( Foldable )
import Data.Function       ( flip )
import Data.Functor        ( Functor )
import Data.List           ( any, intersect, repeat, sort, transpose, zip,
                             zipWith )
import Data.List.NonEmpty  ( nonEmpty )

-- containers --------------------------

import Data.Map.Strict qualified as Map

-- data-textual ------------------------

import Data.Textual ( Textual(textual) )

-- fpath -------------------------------

import FPath.Abs              ( Abs(AbsD, AbsF) )
import FPath.AbsDir           ( AbsDir )
import FPath.AbsFile          ( AbsFile )
import FPath.AppendableFPath  ( (‚´ª) )
import FPath.Basename         ( basename )
import FPath.Dirname          ( dirname )
import FPath.Error.FPathError ( AsFPathError )
import FPath.Parseable        ( parse )
import FPath.PathComponent    ( PathComponent )
import FPath.RelDir           ( reldir )
import FPath.RelFile          ( relfile )
import FPath.ToDir            ( ToDir(toDir) )

-- lens --------------------------------

import Control.Lens.Each   ( each )
import Control.Lens.Fold   ( (^..) )
import Control.Lens.Getter ( view )

-- log-plus ----------------------------

import Log ( Log )

-- logging-effect ----------------------

import Control.Monad.Log ( LoggingT, MonadLog, Severity(Informational) )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock(NoMock), HasDoMock(doMock) )
import MockIO.IOClass ( HasIOClass )

-- mockio-log --------------------------

import MockIO.Log ( MockIOClass, infoIO, warnIO )

-- mockio-plus -------------------------

import MockIO.Directory ( lsdir' )
import MockIO.Process   ( Íô© )

-- monaderror-io -----------------------

import MonadError.IO.Error ( throwUserError )

-- monadio-plus ------------------------

import MonadIO                       ( say )
import MonadIO.Base                  ( getArgs )
import MonadIO.Error.CreateProcError ( AsCreateProcError )
import MonadIO.Error.ProcExitError   ( AsProcExitError )
import MonadIO.FPath                 ( pResolve )
import MonadIO.FStat                 ( isDir )
import MonadIO.User                  ( homePath )

-- mtl ---------------------------------

import Control.Monad.Reader ( MonadReader, ReaderT, asks, runReaderT )

-- natural -----------------------------

import Natural ( length, replicate )

-- optparse-applicative ----------------

import Options.Applicative.Builder     ( command, flag', help, info, long,
                                         progDesc, short, strArgument,
                                         strOption, subparser )
import Options.Applicative.Help.Pretty ( empty, vcat )
import Options.Applicative.Types       ( Parser )

-- optparse-plus -----------------------

import OptParsePlus ( parseNE )

-- safe --------------------------------

import Safe ( maximumDef )

-- stdmain -----------------------------

import StdMain            ( stdMain )
import StdMain.UsageError ( AsUsageError, throwUsage )

-- text --------------------------------

import Data.Text ( intercalate )

-- textual-plus ------------------------

import TextualPlus.Error.TextualParseError ( AsTextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Paths          qualified as Paths
import Nix.Types.AttrPath qualified as AttrPath

import Nix.Error            ( AsNixError, NixProgramError )
import Nix.Flake            ( FlakePkg, FlakePkgs, flakeShow, flakeShow', pkg,
                              pkgFindNames', ver, x86_64_, x86_64_pkgs )
import Nix.Profile          ( nixProfileAbsDir )
import Nix.Profile.Manifest ( attrPaths, readManifestDir )
import Nix.Types            ( Pkg(Pkg), ProfileDir )
import Nix.Types.AttrPath   ( AttrPath )

--------------------------------------------------------------------------------

class HomogenousTuple Œ± where
  type family TupleItem Œ±
  tupleToList ‚à∑ Œ± ‚Üí [TupleItem Œ±]

instance HomogenousTuple (Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±) = Œ±
  tupleToList (a0,a1) = [a0,a1]

instance HomogenousTuple (Œ±,Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±,Œ±) = Œ±
  tupleToList (a0,a1,a2) = [a0,a1,a2]

------------------------------------------------------------

{- Given a list of lines, each being a list of columns; pad out the columns
   to provide an aligned display.

   The columns are padded out according to the input `pads` argument.  Widths
   are set according to the widest input column.  Columns for which no justify
   value is provided are left unmolested.
-}
data Justify = JustifyLeft | JustifyRight

-- provide fixed width args, and ignore args, and centrejustify args

columnify ‚à∑ [Justify] ‚Üí [[ùïã]] ‚Üí [[ùïã]]
columnify pads zs =
  let pad_t ‚à∑ ‚Ñ§ ‚Üí ùïã ‚Üí ùïã
      pad_t (unNegate ‚Üí (SignMinus,n)) t = replicate @ùïã (n ‚äñ length t) ' ' ‚äï t
      pad_t (unNegate ‚Üí (SignPlus, n)) t = t ‚äï replicate @ùïã (n ‚äñ length t) ' '

      col_widths = transpose zs & each ‚äß (\ ys ‚Üí maximumDef 0 $ length ‚ä≥ ys)
      xx JustifyLeft  = 1
      xx JustifyRight = (-1)
      col_widths' = (\(x,y) ‚Üí fromIntegral y * xx x) ‚ä≥ zip pads col_widths
  in
    (^.. each) ‚àò zipWith pad_t (col_widths' ‚äï repeat 0) ‚ä≥ zs

------------------------------------------------------------

-- newtype PkgName = PkgName ùïã
data Packages = AllPackages
              | SomePackages (NonEmpty Pkg)

data Mode = ModeListPkgs (ùïÑ ùïã)
          | ModeListConfigs
          | ModeInstall Packages (ùïÑ ùïã)

newtype Options = Options { mode :: Mode }

----------------------------------------

{-| cmdline options parser -}
parseOptions ‚à∑ Parser Options
parseOptions =
  let
    config_option = strOption (—é [ short 'c', long "config"
                                 , help "select config to use" ])
    install_parser ‚à∑ Parser Mode
    install_parser =
      ModeInstall ‚ä≥ (  (SomePackages ‚ä≥ parseNE (Pkg ‚ä≥ strArgument (help "package")))
                     ‚à§ (flag' AllPackages (—é [ short 'a'
                                                  , help "all packages" ])))
                  ‚äµ optional config_option

  in
    Options ‚ä≥ subparser
    (—é [ command "list-packages"    (info (ModeListPkgs ‚ä≥
                                           optional config_option)
                                     (progDesc "list packages"))
       , command "list-config-dirs" (info (pure ModeListConfigs)
                                     (progDesc "list config directories"))
       , command "install"          (info install_parser
                                     (progDesc "install one or more packages")
                                    )
       ])

------------------------------------------------------------

{-| top dir to look for config flakes -}
configTop ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
            Œº AbsDir
configTop = homePath [reldir|nix/|]

----------------------------------------

newtype ConfigName = ConfigName { unConfigName :: PathComponent }
  deriving (Printable)

instance Textual ConfigName where
  textual = ConfigName ‚ä≥ textual

----------------------------------------

configDir ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
            ConfigName ‚Üí Œº AbsDir
configDir p = (‚´ª fromList [unConfigName p]) ‚ä≥ configTop

----------------------------------------

{-| top dir to look for config flakes -}
configDefault ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
                Œº AbsDir
configDefault = (‚´ª [reldir|default/|]) ‚ä≥ configTop

----------------------------------------

{-| A variant of `lsdir'` that just returns the subdirectories.  For complex
    type issues that I do not grok; it only works for `AbsDir`. -}
subdirs ‚à∑ ‚àÄ Œµ œâ Œº .
          (MonadIO Œº,
           AsFPathError Œµ,AsIOError Œµ,Printable Œµ,MonadError Œµ Œº,HasCallStack,
           HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
          Severity ‚Üí AbsDir ‚Üí DoMock ‚Üí Œº [AbsDir]
subdirs sv d k = fst ‚ä≥‚ä≥ snd ‚ä≥ lsdir' @_ @AbsFile sv d k

----------------------------------------

{-| list of config directories; that is, dirs in `configTop` that contain a
    @flake.nix@ -}
allConfigDirs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [AbsDir]
allConfigDirs = do
  config_top  ‚Üê configTop
  let has_flake ‚à∑ (MonadIO Œº,
                   AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                   HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                  AbsDir ‚Üí Œº ùîπ
      has_flake d  = do
        (fs,_) ‚Üê lsdir' @_ @AbsFile Informational d NoMock
        return $ any (\ (fn, _) ‚Üí [relfile|flake.nix|] ‚â° basename fn) fs
  subdirs Informational config_top NoMock ‚â´ filterM has_flake

----------------------------------------

namePkgVers ‚à∑ FlakePkgs ‚Üí [(ùïã,ùïã,ùïã)]
namePkgVers pkgs =
  let
    pkgVer ‚à∑ FlakePkg ‚Üí (ùïã,ùïã)
    pkgVer fp = (toText $ fp ‚ä£ pkg, maybe "" toText $ fp ‚ä£ ver)

    pfx ‚à∑ Œ± ‚Üí (Œ≤,Œ≥) ‚Üí (Œ±,Œ≤,Œ≥)
    pfx x (y,z) = (x,y,z)
  in
    Map.foldMapWithKey (\ p fp ‚Üí [pfx (toText p) (pkgVer fp)]) $ pkgs ‚ä£ x86_64_

----------------------------------------

natNeg ‚à∑ ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
natNeg x y = if x ‚â• y then x - y else 0

(‚äñ) ‚à∑ ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
(‚äñ) = natNeg

data NumSign = SignPlus | SignMinus

unNegate ‚à∑ ‚Ñ§ ‚Üí (NumSign,‚Ñï)
unNegate n | n < 0     = (SignMinus, fromIntegral $ abs n)
           | otherwise = (SignPlus,  fromIntegral n)

----------------------------------------

{- | If f is a file type then if it is a dir on disc convert it else issue a
     warning and use the base dir; if f is a dir, use that. -}

configDirFromAbs ‚à∑ (MonadIO Œº, Printable Œµ,
                    AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº)‚áí
                   ùïã ‚Üí Œº AbsDir
configDirFromAbs f = do
  pResolve f ‚â´ \ case
    AbsD d ‚Üí return d
    AbsF f' ‚Üí isDir f' ‚â´ \ case
      ùïø ‚Üí return $ toDir f'
      ùï± ‚Üí if basename f' ‚â° [relfile|flake.nix|]
          then return $ f' ‚ä£ dirname
          else parse @PathComponent f ‚â´ configDir ‚àò ConfigName

----------------------------------------

nixDo ‚à∑ ‚àÄ Œµ Œ¥ œÜ Œº . (MonadIO Œº, Foldable œÜ, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                     AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                     AsProcExitError Œµ, Printable Œµ,
                     MonadError Œµ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
        œÜ ùïã ‚Üí Œº ()
nixDo args = snd ‚ä≥ Íô© (Paths.nix, toList args)

----------------------------------------

mkTargets ‚à∑ (Functor œÜ, Printable œÑ) ‚áí AbsDir ‚Üí œÜ œÑ ‚Üí œÜ ùïã
mkTargets config_dir attr_paths = [fmt|%T#%T|] config_dir ‚ä≥ attr_paths

----------------------------------------

info' ‚à∑ ‚àÄ Œ¥ Œ∑ . (MonadReader Œ¥ Œ∑, HasDoMock Œ¥, MonadIO Œ∑,
                 MonadLog (Log MockIOClass) Œ∑) ‚áí ùïã ‚Üí Œ∑()
info' t = asks (view doMock) ‚â´ \ mock ‚Üí infoIO mock t

warn' ‚à∑ ‚àÄ Œ¥ Œ∑ . (MonadReader Œ¥ Œ∑, HasDoMock Œ¥, MonadIO Œ∑,
                 MonadLog (Log MockIOClass) Œ∑) ‚áí ùïã ‚Üí Œ∑()
warn' t = asks (view doMock) ‚â´ \ mock ‚Üí warnIO mock t

msg ‚à∑ ‚àÄ œÑ Œ¥ œÜ Œ∑ . (MonadIO Œ∑, Foldable œÜ, Printable œÑ,
                   HasDoMock Œ¥, MonadReader Œ¥ Œ∑, MonadLog (Log MockIOClass) Œ∑) ‚áí
      ùïã ‚Üí œÑ ‚Üí œÜ AttrPath ‚Üí Œ∑ ()
msg verb object attr_paths = do
  let names = sort $ toText ‚àò view AttrPath.pkg ‚ä≥ toList attr_paths
  warn' $ [fmt|%t: %L|] verb names
  info' $ [fmt|%t: (%T) %L|] verb object attr_paths

----------------------------------------

nixBuild ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                      AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                      AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                      MonadLog (Log MockIOClass) Œº) ‚áí
           AbsDir ‚Üí NonEmpty AttrPath ‚Üí Œº ()
nixBuild config_dir attr_paths = do
  msg "building" config_dir attr_paths
  let targets = mkTargets config_dir attr_paths
  nixDo $ [ "build", "--log-format", "bar-with-logs", "--no-link" ] ‚äï
          (toList targets)

----------------------------------------

nixProfileRemove ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                              AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                              AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                              MonadLog (Log MockIOClass) Œº) ‚áí
                   ProfileDir ‚Üí [AttrPath] ‚Üí Œº ()
nixProfileRemove _ [] = return ()
nixProfileRemove profile attr_paths = do
  msg "removing" profile attr_paths
  nixDo $ ["profile", "remove", "--verbose", "--profile", toText profile] ‚äï
          (toText ‚ä≥ attr_paths)

----------------------------------------

nixProfileInstall ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                              AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                              AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                              MonadLog (Log MockIOClass) Œº) ‚áí
                   AbsDir ‚Üí ProfileDir ‚Üí NonEmpty AttrPath ‚Üí Œº ()
nixProfileInstall config_dir profile attr_paths = do
  msg "installing" ([fmtT|%T‚Üí%T|] config_dir profile) attr_paths
  let targets = mkTargets config_dir attr_paths
  nixDo $ [ "profile", "install", "--profile", toText profile ] ‚äï
          (toList targets)

----------------------------------------

noMock ‚à∑ ‚àÄ Œ∑ Œ± . ReaderT DoMock Œ∑ Œ± ‚Üí Œ∑ Œ±
noMock = flip runReaderT NoMock

----------------------------------------

partitionMaybes ‚à∑ [(Œ±, ùïÑ Œ≤)] ‚Üí ([Œ±], [(Œ±,Œ≤)])
partitionMaybes = go ([],[])
  where go (naes,yaes) []             = (naes, yaes)
        go (naes,yaes) ((a,ùïπ) : xs)   = go (a:naes, yaes) xs
        go (naes,yaes) ((a,ùïµ b) : xs) = go (naes, (a,b) : yaes) xs

----------------------------------------

checkPackages ‚à∑ ‚àÄ Œµ Œ± Œº .
                (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                 AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
                 AsCreateProcError Œµ, AsProcExitError Œµ, AsNixError Œµ,
                 Printable Œµ, MonadError Œµ Œº) ‚áí
                (AbsDir ‚Üí ProfileDir ‚Üí NonEmpty AttrPath ‚Üí Œº Œ±) ‚Üí Maybe ùïã
              ‚Üí Packages ‚Üí Œº Œ±
checkPackages f c pkgs = do
  config_dir     ‚Üê maybe configDefault configDirFromAbs c
  target_profile ‚Üê nixProfileAbsDir c

  flkPkgs ‚à∑ FlakePkgs ‚Üê flakeShow' config_dir

  pkgs' ‚à∑ NonEmpty Pkg ‚Üê case pkgs of
            SomePackages ps ‚Üí return ps
            AllPackages ‚Üí
              case nonEmpty $ x86_64_pkgs flkPkgs of
                ùïπ    ‚Üí throwUserError $ [fmtT|no packages found: %T|] config_dir
                ùïµ ps ‚Üí return ps
  partitionMaybes ‚àò toList ‚ä≥ pkgFindNames' flkPkgs pkgs' ‚â´ \ case
    (missing:[],_) ‚Üí
      throwUsage $ [fmtT|package not found: %T|] missing
    (missing@(_:_:_),_) ‚Üí
      throwUsage $ [fmtT|packages not found: %L|] missing
    ([],pkgs'') ‚Üí case  nonEmpty (snd ‚ä≥ pkgs'') of
                    ùïµ attr_paths ‚Üí f config_dir target_profile attr_paths
                    ùïπ ‚Üí
                      throwUsage $ ("internal error: nonEmpty pkgs' means " ‚à∑ ùïã)
                                 ‚äï "this should never happen"

----------------------------------------

mainInstall ‚à∑ ‚àÄ Œµ Œ¥ Œº .
              (MonadIO Œº, AsProcExitError Œµ, AsCreateProcError Œµ,
               AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
               HasDoMock Œ¥, MonadReader Œ¥ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
              AbsDir ‚Üí ProfileDir ‚Üí NonEmpty AttrPath ‚Üí Œº Word8

mainInstall config_dir target_profile attr_paths = do
  -- test build all the packages, before we make any destructive changes to
  -- the profile
  nixBuild config_dir attr_paths

  profile_manifest ‚Üê noMock $
    readManifestDir Informational target_profile ‚â´ either throwUserError return

  -- pre-remove anything found in the manifest; we're replacing/updating,
  -- rather than adding

  -- we do it this way because nix profile upgrade doesn't work with
  -- our flakes; e.g.,
  {- $ nix profile upgrade --profile /nix/var/nix/profiles/per-user/martyn/haskell /home/martyn/nix/haskell#packages.x86_64-linux.ghc
     warning: '/home/martyn/nix/haskell#packages.x86_64-linux.ghc' does not match any packages
  -}
  -- true even if we use, e.g.,
  -- git+file:///home/martyn/nix/haskell#packages.x86_64-linux.ghc
  -- cited by nix profile list

  -- nix profile install adds a new package without removing the older one

  let removals = intersect (attrPaths profile_manifest) (toList attr_paths)
  nixProfileRemove target_profile removals
  nixProfileInstall config_dir target_profile attr_paths
  return 0

----------------------------------------

{-| List all the packages from a given flake -}
mainListPkgs ‚à∑ (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                AsAesonError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
                AsFPathError Œµ, AsIOError Œµ, Printable Œµ,
                MonadError Œµ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
               ùïÑ ùïã ‚Üí Œº Word8
mainListPkgs f = do
  config_dir ‚Üê maybe configDefault configDirFromAbs f
  xs ‚à∑ [(ùïã,ùïã,ùïã)] ‚Üê namePkgVers ‚ä≥ flakeShow config_dir
  let xs' = tupleToList ‚ä≥ xs
  forM_ (columnify [JustifyLeft, JustifyLeft, JustifyRight] xs')
        (say ‚àò intercalate "\t")
  return 0

----------------------------------------

myMain ‚à∑ (HasCallStack, AsNixError Œµ, AsIOError Œµ,AsFPathError Œµ,AsAesonError Œµ,
          AsCreateProcError Œµ, AsProcExitError Œµ, AsTextualParseError Œµ,
          AsUsageError Œµ, Printable Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain do_mock opts = flip runReaderT do_mock $
  case mode opts of
    ModeListPkgs f   ‚Üí mainListPkgs f
    ModeInstall ps c ‚Üí checkPackages mainInstall c ps
    ModeListConfigs  ‚Üí allConfigDirs ‚â´ mapM_ say ‚™º return 0

{-| program main entry point -}
main ‚à∑ MonadIO Œº ‚áí Œº ()
main = do
-- show all configs (as option)
  let desc =
        vcat $ [ "manage nix configs for ~home installation", empty ]
  getArgs ‚â´ stdMain desc parseOptions (myMain @NixProgramError)

-- that's all, folks! ----------------------------------------------------------
