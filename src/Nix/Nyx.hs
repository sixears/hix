-- add version-based upgrading semantic
-- add handling of different architectures

-- add Handle for default profile (~/.nix-profile) (make it a required arg)
-- add nix-install, nix-search equivs

{-# LANGUAGE ImportQualifiedPost   #-}
{-# LANGUAGE LambdaCase            #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE RankNTypes            #-}
{-# LANGUAGE TypeApplications      #-}
{-# LANGUAGE UnicodeSyntax         #-}

{-| nyx program to manage local configurations -}
module Nix.Nyx
  ( main
  ) where

import Base1T

-- aeson-plus --------------------------

import Data.Aeson.Error ( AsAesonError )

-- base --------------------------------

import Data.Foldable      ( Foldable, concat )
import Data.Function      ( flip )
import Data.List          ( intersect, sort, sortOn )
import Data.List.NonEmpty ( nonEmpty )
import Data.Tuple         ( swap, uncurry )

-- columnify ---------------------------

import Text.Columnify ( Justify(JustifyLeft, JustifyRight), columnify )

-- containers --------------------------

import Data.Map.Strict qualified as Map

-- fpath -------------------------------

import FPath.Error.FPathError ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter ( view )
import Control.Lens.Tuple  ( _1 )

-- log-plus ----------------------------

import Log ( Log )

-- logging-effect ----------------------

import Control.Monad.Log ( LoggingT, MonadLog, Severity(Notice) )

-- mockio ------------------------------

import MockIO        ( noMock )
import MockIO.DoMock ( DoMock, HasDoMock )

-- mockio-log --------------------------

import MockIO.Log             ( MockIOClass )
import MockIO.Log.MonadReader ( debug, info )

-- monaderror-io -----------------------

import MonadError.IO.Error ( throwUserError )

-- monadio-plus ------------------------

import MonadIO                       ( say )
import MonadIO.Base                  ( getArgs )
import MonadIO.Error.CreateProcError ( AsCreateProcError )
import MonadIO.Error.ProcExitError   ( AsProcExitError )

-- more-unicode ------------------------

import Data.MoreUnicode.Monad ( (‚Æû) )

-- mtl ---------------------------------

import Control.Monad.Reader ( MonadReader, runReaderT )

-- optparse-applicative ----------------

import Options.Applicative.Help.Pretty ( empty, vcat )

-- stdmain -----------------------------

import StdMain            ( stdMain )
import StdMain.UsageError ( AsUsageError, throwUsageT )

-- text --------------------------------

import Data.Text ( intercalate )

-- textual-plus ------------------------

import TextualPlus.Error.TextualParseError ( AsTextualParseError )

-- tuple-plus --------------------------

import Data.TuplePlus ( tupleToList )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Error            ( AsNixError, NixProgramError )
import Nix.Flake            ( FlakePkgs, flakeShowNM, namePkgVersPrioSrcArch,
                              pkgFindNames', x86_64_pkgs )
import Nix.NixExe           ( nixBuild, nixProfileInstall, nixProfileRemove )
import Nix.Nyx.Options      ( Configs(AllConfigs, SomeConfigs),
                              Mode(ModeInstall, ModeListConfigNames, ModeListConfigs, ModeListPkgs),
                              Options, Packages(AllPackages, SomePackages),
                              mode, parseOptions, remote_state )
import Nix.Profile          ( nixProfileAbsDir )
import Nix.Profile.Manifest ( attrPaths, readManifestDir )
import Nix.Types            ( Pkg, Priority, ProfileDir, RemoteState )
import Nix.Types.AttrPath   ( AttrPath )
import Nix.Types.ConfigDir  ( ConfigDir, allConfigDirs, allConfigNames,
                              configDirFromAbs )
import Nix.Types.ConfigName ( ConfigName(unConfigName), configDefault )

--------------------------------------------------------------------------------

partitionMaybes ‚à∑ [(Œ±, ùïÑ Œ≤)] ‚Üí ([Œ±], [(Œ±,Œ≤)])
partitionMaybes = go ([],[])
  where go (naes,yaes) []             = (naes, yaes)
        go (naes,yaes) ((a,ùïπ) : xs)   = go (a:naes, yaes) xs
        go (naes,yaes) ((a,ùïµ b) : xs) = go (naes, (a,b) : yaes) xs

----------------------------------------

checkPackages ‚à∑ ‚àÄ Œµ Œ± Œº .
                (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                 AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
                 AsCreateProcError Œµ, AsProcExitError Œµ, AsNixError Œµ,
                 AsTextualParseError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                (ConfigDir ‚Üí ProfileDir
                           ‚Üí Map.Map (ùïÑ Priority) (NonEmpty AttrPath) ‚Üí Œº ())
              ‚Üí (ConfigDir ‚Üí ProfileDir
                           ‚Üí Map.Map (ùïÑ Priority) (NonEmpty AttrPath) ‚Üí Œº Œ±)
              ‚Üí RemoteState ‚Üí [ConfigName] ‚Üí Packages ‚Üí Œº Word8
checkPackages check go r [] pkgs = checkPackages check go r [configDefault] pkgs
checkPackages check go r cs pkgs = do
  -- targets ‚à∑ [(ConfigDir,ProfileDir,NonEmpty AttrPath)]
  targets ‚Üê collectPackages r cs pkgs
  -- we split into 'check' and 'go' so that we can do pre-emptively make all the
  -- necessary checks before making any destructive changes
  forM_ targets (\ (cd,pd,aps) ‚Üí check cd pd aps)
  forM_ targets (\ (cd,pd,aps) ‚Üí go cd pd aps)
  return 0

----------------------------------------

multiMap ‚à∑ (Foldable œà, Ord Œ∫) ‚áí œà (Œ∫,ŒΩ) ‚Üí Map.Map Œ∫ (NonEmpty ŒΩ)
multiMap = Map.fromListWith (‚óá) ‚àò fmap (second pure) ‚àò toList

----------------------------------------

{-| Find what packages to install.

    Given some config names (desktop, haskell, scripts, etc.) and some package
    names (emacs, audacious, etc.); return a load of tuples of `ConfigDir`
    (source to build from), `ProfileDir` (profile to install to) and `AttrPath`s
    (things to install).

    If a number of packages are requested, they must exist in each specified
    `ConfigDir`.  The use of multiple configs probably makes sense only with
    `AllPackages`.
-}
collectPackages ‚à∑ ‚àÄ Œµ œà Œº .
                  (MonadIO Œº, Traversable œà, MonadLog (Log MockIOClass) Œº,
                   AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
                   AsCreateProcError Œµ, AsProcExitError Œµ, AsNixError Œµ,
                   AsTextualParseError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                  RemoteState ‚Üí œà ConfigName ‚Üí Packages
                ‚Üí Œº (œà (ConfigDir, ProfileDir,
                        Map.Map (ùïÑ Priority) (NonEmpty AttrPath)))

collectPackages r cs pkgs =
  forM cs (\ c ‚Üí do
    config_dir     ‚Üê configDirFromAbs c
    target_profile ‚Üê nixProfileAbsDir (toText $ unConfigName c)

    flkPkgs ‚à∑ FlakePkgs ‚Üê flakeShowNM r config_dir

    pkgs' ‚à∑ NonEmpty Pkg ‚Üê
      case pkgs of
        SomePackages ps ‚Üí return ps
        AllPackages ‚Üí
          case nonEmpty $ x86_64_pkgs flkPkgs of
            ùïπ    ‚Üí throwUsageT $ [fmt|no packages found: %T|] config_dir
            ùïµ ps ‚Üí return ps
    partitionMaybes ‚àò toList ‚ä≥ pkgFindNames' flkPkgs pkgs' ‚â´ \ case
      (missing:[],_) ‚Üí
        throwUsageT $ [fmt|package not found in %T: %T|] c missing
      (missing@(_:_:_),_) ‚Üí
        throwUsageT $ [fmt|packages not found in %T: %L|] c missing
      ([],pkgs'' ‚à∑ [(Pkg,(AttrPath, (ùïÑ Priority)))]) ‚Üí
        case nonEmpty (snd ‚ä≥ pkgs'') of
          ùïµ attr_path_prios ‚Üí do return (config_dir, target_profile,
                                         multiMap $ swap ‚ä≥ attr_path_prios)
          ùïπ ‚Üí
            throwUsageT $ intercalate " " [ "internal error: nonEmpty pkgs'"
                                          , "means this should never happen"])


----------------------------------------

installFromOneConfig ‚à∑
  ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, AsProcExitError Œµ, AsCreateProcError Œµ,
             AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
             HasDoMock Œ¥, MonadReader Œ¥ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
            ConfigDir ‚Üí ProfileDir ‚Üí ùïÑ Priority ‚Üí NonEmpty AttrPath ‚Üí Œº ()

installFromOneConfig config_dir target_profile prio_m attr_paths = do
  profile_manifest ‚Üê noMock $
    readManifestDir Notice target_profile ‚â´ either throwUserError return

  -- pre-remove anything found in the manifest; we're replacing/updating,
  -- rather than adding

  -- we do it this way because nix profile upgrade doesn't work with
  -- our flakes; e.g.,
  {- nix profile upgrade --profile \
             /nix/var/nix/profiles/per-user/martyn/haskell \
             /home/martyn/nix/haskell#packages.x86_64-linux.ghc
     warning: '/home/martyn/nix/haskell#packages.x86_64-linux.ghc' \
             does not match any packages
  -}
  -- true even if we use, e.g.,
  -- git+file:///home/martyn/nix/haskell#packages.x86_64-linux.ghc
  -- cited by nix profile list

  -- nix profile install adds a new package without removing the older one

  debug $ [fmt|manifest: %T|] profile_manifest
  info $ [fmt|manifest paths: %L|] (attrPaths profile_manifest)
  info $ [fmt|attr_path_prios: %L|] (toList attr_paths)
  let removals = intersect (attrPaths profile_manifest) (toList attr_paths)
  nixProfileRemove target_profile removals
  nixProfileInstall config_dir target_profile prio_m attr_paths
  return ()

----------------------------------------

configFlakePkgs ‚à∑ ‚àÄ Œµ Œº .
                  (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                   AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                   AsProcExitError Œµ, AsAesonError Œµ, AsTextualParseError Œµ,
                  Printable Œµ, MonadError Œµ Œº) ‚áí
                  RemoteState ‚Üí [ConfigDir] ‚Üí Œº [FlakePkgs]
configFlakePkgs r config_dirs = (flakeShowNM r ‚Æû config_dirs)

{-| Given a list of `ConfigDir`, generate a list rows, each representing
    a package from those config dirs.  Each row is:
    name (installation name), pkg (nix package name), pkg version,
    installation priority (if any), src (config dir in which the name/pkg is
    defined), arch (host architecture).
-}
configFlakeTxts ‚à∑ ‚àÄ Œµ Œº .
                  (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                   AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                   AsProcExitError Œµ, AsAesonError Œµ, AsTextualParseError Œµ,
                  Printable Œµ, MonadError Œµ Œº) ‚áí
     RemoteState ‚Üí [ConfigDir] ‚Üí Œº [(ùïã,ùïã,ùïã,ùïã,ùïã,ùïã)]
configFlakeTxts r config_dirs =
  —é ‚ä≥ (namePkgVersPrioSrcArch ‚ä≥‚ä≥ configFlakePkgs r config_dirs)

{-| List all the packages from a given flake -}
mainListPkgs ‚à∑ (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                AsAesonError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
                AsFPathError Œµ, AsIOError Œµ, AsTextualParseError Œµ,
                Printable Œµ, MonadError Œµ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
               RemoteState ‚Üí Configs ‚Üí Œº Word8
mainListPkgs r AllConfigs = allConfigNames ‚â´ mainListPkgs r ‚àò SomeConfigs
mainListPkgs r (SomeConfigs []) = mainListPkgs r (SomeConfigs [configDefault])
mainListPkgs r (SomeConfigs cs) = do
  config_dirs ‚à∑ [ConfigDir] ‚Üê mapM configDirFromAbs cs
  xs ‚Üê sortOn (view _1) ‚ä≥ configFlakeTxts r config_dirs

  let xs' = tupleToList ‚ä≥ xs
  forM_ (columnify [ JustifyLeft, JustifyLeft, JustifyRight,
                     JustifyLeft, JustifyLeft, JustifyLeft ] xs')
                (say ‚àò intercalate "\t")
  return 0

----------------------------------------

myMain ‚à∑ (HasCallStack,
          AsNixError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
          AsCreateProcError Œµ, AsProcExitError Œµ, AsTextualParseError Œµ,
          AsUsageError Œµ, Printable Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain do_mock opts = flip runReaderT do_mock $
  let
    r = opts ‚ä£ remote_state
  in
    case opts ‚ä£ mode of
      ModeListConfigs     ‚Üí allConfigDirs ‚â´ mapM_ say ‚™º return 0
      ModeListConfigNames ‚Üí allConfigNames ‚â´ mapM_ say ‚àò sort ‚™º return 0
      ModeListPkgs cs     ‚Üí mainListPkgs r cs
      ModeInstall cs ps   ‚Üí
        let installFromOneConfigs cd pd =
              mapM_ (uncurry $ installFromOneConfig cd pd) ‚àò Map.toList
            concat' ‚à∑ [NonEmpty Œ±] ‚Üí NonEmpty Œ±
            concat' xs = fromList $ concat (toList ‚ä≥ xs)
        in  checkPackages (\ cd _ aps ‚Üí nixBuild cd (concat' $ Map.elems aps))
                          installFromOneConfigs r cs ps

{-| program main entry point -}
main ‚à∑ MonadIO Œº ‚áí Œº ()
main = do
  let desc = vcat $ [ "manage nix configs for ~home installation", empty ]
  getArgs ‚â´ stdMain desc parseOptions (myMain @NixProgramError)

-- that's all, folks! ----------------------------------------------------------
