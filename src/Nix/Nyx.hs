-- add Handle for default profile (~/.nix-profile)
-- add nix-install, nix-search equivs

{-# LANGUAGE ImportQualifiedPost   #-}
{-# LANGUAGE LambdaCase            #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE RankNTypes            #-}
{-# LANGUAGE TypeApplications      #-}
{-# LANGUAGE UnicodeSyntax         #-}

{-| nyx program to manage local configurations -}
module Nix.Nyx
  ( main
  ) where

import Base1T

import Prelude ( error )

-- aeson-plus --------------------------

import Data.Aeson.Error ( AsAesonError )

-- base --------------------------------

import Data.List.NonEmpty qualified as NonEmpty

import Data.Foldable      ( Foldable, concat )
import Data.Function      ( flip )
import Data.Functor       ( Functor )
import Data.List          ( any, intersect, sort, sortOn )
import Data.List.NonEmpty ( nonEmpty )
import Data.Tuple         ( swap, uncurry )

-- columnify ---------------------------

import Text.Columnify ( Justify(JustifyLeft, JustifyRight), columnify )

-- containers --------------------------

import Data.Map.Strict qualified as Map

-- fpath -------------------------------

import FPath.Abs              ( Abs(AbsD, AbsF) )
import FPath.AbsDir           ( AbsDir )
import FPath.AbsFile          ( AbsFile )
import FPath.AppendableFPath  ( (‚´ª) )
import FPath.Basename         ( basename )
import FPath.Dirname          ( dirname )
import FPath.Error.FPathError ( AsFPathError )
import FPath.Parseable        ( Parseable(parse) )
import FPath.PathComponent    ( PathComponent, pc )
import FPath.RelDir           ( reldir )
import FPath.RelFile          ( relfile )
import FPath.ToDir            ( ToDir(toDir) )

-- lens --------------------------------

import Control.Lens.Getter ( view )
import Control.Lens.Tuple  ( _1 )

-- log-plus ----------------------------

import Log ( Log )

-- logging-effect ----------------------

import Control.Monad.Log ( LoggingT, MonadLog, Severity(Informational, Notice) )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock(NoMock), HasDoMock(doMock) )
import MockIO.IOClass ( HasIOClass )

-- mockio-log --------------------------

import MockIO.Log ( MockIOClass, debugIO, infoIO, noticeIO, warnIO )

-- mockio-plus -------------------------

import MockIO.Directory ( lsdir' )

-- monaderror-io -----------------------

import MonadError.IO.Error ( throwUserError )

-- monadio-plus ------------------------

import MonadIO                       ( say )
import MonadIO.Base                  ( getArgs )
import MonadIO.Error.CreateProcError ( AsCreateProcError )
import MonadIO.Error.ProcExitError   ( AsProcExitError )
import MonadIO.FPath                 ( pResolve )
import MonadIO.FStat                 ( isDir )
import MonadIO.User                  ( homePath )

-- mono-traversable --------------------

import Data.MonoTraversable ( otoList )

-- mtl ---------------------------------

import Control.Monad.Reader ( MonadReader, ReaderT, asks, runReaderT )

-- optparse-applicative ----------------

import Options.Applicative.Help.Pretty ( empty, vcat )

-- safe --------------------------------

import Safe ( lastMay )

-- stdmain -----------------------------

import StdMain            ( stdMain )
import StdMain.UsageError ( AsUsageError, throwUsage )

-- text --------------------------------

import Data.Text ( intercalate )

-- textual-plus ------------------------

import TextualPlus.Error.TextualParseError ( AsTextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix ( nixDo )

import Nix.Types.AttrPath qualified as AttrPath

import Nix.Error            ( AsNixError, NixProgramError )
import Nix.Flake            ( FlakePkg, FlakePkgs, archMap, flakeShowNM,
                              location, pkg, pkgFindNames', priority, ver,
                              x86_64_pkgs )
import Nix.Nyx.Options      ( Configs(AllConfigs, SomeConfigs),
                              Mode(ModeInstall, ModeListConfigNames, ModeListConfigs, ModeListPkgs),
                              Options, Packages(AllPackages, SomePackages),
                              mode, parseOptions, remote_state )
import Nix.Profile          ( nixProfileAbsDir )
import Nix.Profile.Manifest ( attrPaths, readManifestDir )
import Nix.Types            ( Arch, ConfigDir(ConfigDir, unConfigDir),
                              ConfigName(ConfigName, unConfigName), Pkg,
                              Priority(unPriority), ProfileDir, RemoteState,
                              ToBriefText(toT) )
import Nix.Types.AttrPath   ( AttrPath )

--------------------------------------------------------------------------------

class HomogenousTuple Œ± where
  type family TupleItem Œ±
  tupleToList ‚à∑ Œ± ‚Üí [TupleItem Œ±]

instance HomogenousTuple (Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±) = Œ±
  tupleToList (a0,a1) = [a0,a1]

instance HomogenousTuple (Œ±,Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±,Œ±) = Œ±
  tupleToList (a0,a1,a2) = [a0,a1,a2]

instance HomogenousTuple (Œ±,Œ±,Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±,Œ±,Œ±) = Œ±
  tupleToList (a0,a1,a2,a3) = [a0,a1,a2,a3]

instance HomogenousTuple (Œ±,Œ±,Œ±,Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±,Œ±,Œ±,Œ±) = Œ±
  tupleToList (a0,a1,a2,a3,a4) = [a0,a1,a2,a3,a4]

instance HomogenousTuple (Œ±,Œ±,Œ±,Œ±,Œ±,Œ±) where
  type instance TupleItem (Œ±,Œ±,Œ±,Œ±,Œ±,Œ±) = Œ±
  tupleToList (a0,a1,a2,a3,a4,a5) = [a0,a1,a2,a3,a4,a5]

------------------------------------------------------------

class TuplePrepend Œ± Œ≤ Œ≥ where
  type family TuplePrepended Œ± Œ≤
  tuplePrepend ‚à∑ Œ± ‚Üí Œ≤ ‚Üí Œ≥
  (‚®§) ‚à∑ Œ± ‚Üí Œ≤ ‚Üí Œ≥
  (‚®§) = tuplePrepend

instance ‚àÄ Œ± Œ≤ Œ≥ . TuplePrepend Œ± (Œ≤,Œ≥) (Œ±,Œ≤,Œ≥) where
  type instance TuplePrepended Œ± (Œ≤,Œ≥) = (Œ±,Œ≤,Œ≥)
  tuplePrepend Œ± (Œ≤,Œ≥) = (Œ±,Œ≤,Œ≥)

instance ‚àÄ Œ± Œ≤ Œ≥ Œ¥ . TuplePrepend Œ± (Œ≤,Œ≥,Œ¥) (Œ±,Œ≤,Œ≥,Œ¥) where
  type instance TuplePrepended Œ± (Œ≤,Œ≥,Œ¥) = (Œ±,Œ≤,Œ≥,Œ¥)
  tuplePrepend Œ± (Œ≤,Œ≥,Œ¥) = (Œ±,Œ≤,Œ≥,Œ¥)

------------------------------------------------------------

class TupleAppend Œ± Œ≤ Œ≥ where
  type family TupleAppended Œ± Œ≤
  tupleAppend ‚à∑ Œ± ‚Üí Œ≤ ‚Üí Œ≥
  (‚®¶) ‚à∑ Œ± ‚Üí Œ≤ ‚Üí Œ≥
  (‚®¶) = tupleAppend

instance ‚àÄ Œ± Œ≤ Œ≥ . TupleAppend (Œ±,Œ≤) Œ≥ (Œ±,Œ≤,Œ≥) where
  type instance TupleAppended (Œ±,Œ≤) Œ≥ = (Œ±,Œ≤,Œ≥)
  tupleAppend (Œ±,Œ≤) Œ≥ = (Œ±,Œ≤,Œ≥)

instance ‚àÄ Œ± Œ≤ Œ≥ Œ¥ . TupleAppend (Œ±,Œ≤,Œ≥) Œ¥ (Œ±,Œ≤,Œ≥,Œ¥) where
  type instance TupleAppended (Œ±,Œ≤,Œ≥) Œ¥ = (Œ±,Œ≤,Œ≥,Œ¥)
  tupleAppend (Œ±,Œ≤,Œ≥) Œ¥ = (Œ±,Œ≤,Œ≥,Œ¥)

instance ‚àÄ Œ± Œ≤ Œ≥ Œ¥ Œ∫ . TupleAppend (Œ±,Œ≤,Œ≥,Œ¥) Œ∫ (Œ±,Œ≤,Œ≥,Œ¥,Œ∫) where
  type instance TupleAppended (Œ±,Œ≤,Œ≥,Œ¥) Œ∫ = (Œ±,Œ≤,Œ≥,Œ¥,Œ∫)
  tupleAppend (Œ±,Œ≤,Œ≥,Œ¥) Œ∫ = (Œ±,Œ≤,Œ≥,Œ¥,Œ∫)

instance ‚àÄ Œ± Œ≤ Œ≥ Œ¥ Œ∫ Œπ . TupleAppend (Œ±,Œ≤,Œ≥,Œ¥,Œ∫) Œπ (Œ±,Œ≤,Œ≥,Œ¥,Œ∫,Œπ) where
  type instance TupleAppended (Œ±,Œ≤,Œ≥,Œ¥,Œ∫) Œπ = (Œ±,Œ≤,Œ≥,Œ¥,Œ∫,Œπ)
  tupleAppend (Œ±,Œ≤,Œ≥,Œ¥,Œ∫) Œπ = (Œ±,Œ≤,Œ≥,Œ¥,Œ∫,Œπ)

------------------------------------------------------------

(‚Æû) ‚à∑ (Monad Œ∑, Traversable œà) ‚áí (Œ± ‚Üí Œ∑ Œ≤) ‚Üí œà Œ± ‚Üí Œ∑ (œà Œ≤)
(‚Æû) = mapM

(‚Æö) ‚à∑ (Monad Œ∑, Foldable œÜ) ‚áí (Œ± ‚Üí Œ∑ ()) ‚Üí œÜ Œ± ‚Üí Œ∑ ()
(‚Æö) = mapM_

(‚Æú) ‚à∑ (Monad Œ∑, Traversable œà) ‚áí œà Œ± ‚Üí (Œ± ‚Üí Œ∑ Œ≤) ‚Üí Œ∑ (œà Œ≤)
(‚Æú) = forM

(‚Æò) ‚à∑ (Monad Œ∑, Foldable œÜ) ‚áí œÜ Œ± ‚Üí (Œ± ‚Üí Œ∑ ()) ‚Üí Œ∑ ()
(‚Æò) = forM_

------------------------------------------------------------

debug ‚à∑ ‚àÄ Œ¥ Œ∑ . (MonadReader Œ¥ Œ∑, HasDoMock Œ¥, MonadIO Œ∑,
                  MonadLog (Log MockIOClass) Œ∑) ‚áí ùïã ‚Üí Œ∑ ()
debug t = asks (view doMock) ‚â´ \ mock ‚Üí debugIO mock t

info ‚à∑ ‚àÄ Œ¥ Œ∑ . (MonadReader Œ¥ Œ∑, HasDoMock Œ¥, MonadIO Œ∑,
                  MonadLog (Log MockIOClass) Œ∑) ‚áí ùïã ‚Üí Œ∑ ()
info t = asks (view doMock) ‚â´ \ mock ‚Üí infoIO mock t

notice ‚à∑ ‚àÄ Œ¥ Œ∑ . (MonadReader Œ¥ Œ∑, HasDoMock Œ¥, MonadIO Œ∑,
                 MonadLog (Log MockIOClass) Œ∑) ‚áí ùïã ‚Üí Œ∑ ()
notice t = asks (view doMock) ‚â´ \ mock ‚Üí noticeIO mock t

warn ‚à∑ ‚àÄ Œ¥ Œ∑ . (MonadReader Œ¥ Œ∑, HasDoMock Œ¥, MonadIO Œ∑,
                 MonadLog (Log MockIOClass) Œ∑) ‚áí ùïã ‚Üí Œ∑ ()
warn t = asks (view doMock) ‚â´ \ mock ‚Üí warnIO mock t

----------------------------------------

{-| A variant of `lsdir'` that just returns the subdirectories.  For complex
    type issues that I do not grok; it only works for `AbsDir`. -}
subdirs ‚à∑ ‚àÄ Œµ œâ Œº .
          (MonadIO Œº,
           AsFPathError Œµ,AsIOError Œµ,Printable Œµ,MonadError Œµ Œº,HasCallStack,
           HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
          Severity ‚Üí AbsDir ‚Üí DoMock ‚Üí Œº [AbsDir]
subdirs sv d k = fst ‚ä≥‚ä≥ snd ‚ä≥ lsdir' @_ @AbsFile sv d k

----------------------------------------

{- Given a list of lines, each being a list of columns; pad out the columns
   to provide an aligned display.

   The columns are padded out according to the input `pads` argument.  Widths
   are set according to the widest input column.  Columns for which no justify
   value is provided are left unmolested.
-}
-- data Justify = JustifyLeft | JustifyRight

-- provide fixed width args, and ignore args, and centrejustify args

{-
columnify ‚à∑ [Justify] ‚Üí [[ùïã]] ‚Üí [[ùïã]]
columnify pads zs =
  let pad_t ‚à∑ ‚Ñ§ ‚Üí ùïã ‚Üí ùïã
      pad_t (unNegate ‚Üí (SignMinus,n)) t = replicate @ùïã (n ‚äñ length t) ' ' ‚äï t
      pad_t (unNegate ‚Üí (SignPlus, n)) t = t ‚äï replicate @ùïã (n ‚äñ length t) ' '

      col_widths = transpose zs & each ‚äß (\ ys ‚Üí maximumDef 0 $ length ‚ä≥ ys)
      xx JustifyLeft  = 1
      xx JustifyRight = (-1)
      col_widths' = (\(x,y) ‚Üí fromIntegral y * xx x) ‚ä≥ zip pads col_widths
  in
    (^.. each) ‚àò zipWith pad_t (col_widths' ‚äï repeat 0) ‚ä≥ zs
-}

----------------------------------------

throwUsage' ‚à∑ ‚àÄ Œµ œâ Œ∑ . (AsUsageError Œµ, MonadError Œµ Œ∑) ‚áí ùïã ‚Üí Œ∑ œâ
throwUsage' = throwUsage

------------------------------------------------------------

{-| top dir to look for config flakes -}
configTop ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
            Œº AbsDir
configTop = homePath [reldir|nix/|]

----------------------------------------

configDir ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
            ConfigName ‚Üí Œº ConfigDir
configDir p = ConfigDir ‚ä≥ ((‚´ª fromList [unConfigName p]) ‚ä≥ configTop)

----------------------------------------

{-| top dir to look for config flakes -}
configDefault ‚à∑ ConfigName
configDefault = ConfigName [pc|default|]

----------------------------------------

{-| list of config directories; that is, dirs in `configTop` that contain a
    @flake.nix@ -}
allConfigDirs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [AbsDir]
allConfigDirs = do
  config_top  ‚Üê configTop
  let has_flake ‚à∑ (MonadIO Œº,
                   AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                   HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                  AbsDir ‚Üí Œº ùîπ
      has_flake d  = do
        (fs,_) ‚Üê lsdir' @_ @AbsFile Informational d NoMock
        return $ any (\ (fn, _) ‚Üí [relfile|flake.nix|] ‚â° basename fn) fs
  subdirs Informational config_top NoMock ‚â´ filterM has_flake


----------------------------------------

allConfigNames ‚à∑ (MonadIO Œº,
                  HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
                  AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                 Œº [ConfigName]
allConfigNames = basePC ‚ä≥‚ä≥ allConfigDirs
  where basePC ‚à∑ AbsDir ‚Üí ConfigName
        basePC dir = case lastMay ‚àò otoList $ basename dir of
                        ùïπ   ‚Üí error $ [fmt|could not find ConfigName of %T|] dir
                        ùïµ p ‚Üí ConfigName p

----------------------------------------

namePkgVersPrioSrcArch ‚à∑ FlakePkgs ‚Üí [(ùïã,ùïã,ùïã,ùïã,ùïã,ùïã)]
namePkgVersPrioSrcArch pkgs =
  let
    pkgVer ‚à∑ FlakePkg ‚Üí (ùïã,ùïã,ùïã)
    pkgVer fp = (toText $ fp ‚ä£ pkg, maybe "" toText $ fp ‚ä£ ver,
                 maybe "" toText $ fp ‚ä£ priority)

    go ‚à∑ Pkg ‚Üí FlakePkg ‚Üí [(ùïã,ùïã,ùïã,ùïã,ùïã)]
    go p fp = [(toText p ‚®§ (pkgVer fp) ‚à∑ (ùïã,ùïã,ùïã,ùïã)) ‚®¶ toText (pkgs ‚ä£ location)]
    go' ‚à∑ Arch ‚Üí Map.Map Pkg FlakePkg ‚Üí [(ùïã,ùïã,ùïã,ùïã,ùïã,ùïã)]
    go' arch fpmap = (‚®¶ (toText arch)) ‚ä≥ Map.foldMapWithKey go fpmap
  in
    Map.foldMapWithKey go' (pkgs ‚ä£ archMap)

----------------------------------------

{- | Given the name of a config (e.g., "haskell"); find the flake directory for
     that config (e.g., ~/nix/haskell/).

     If f is a file type then if it is a dir on disc convert it else issue a
     warning and use the base dir; if f is a dir, use that.
-}

configDirFromAbs ‚à∑ (MonadIO Œº, Printable Œµ,
                    AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº)‚áí
                   ConfigName ‚Üí Œº ConfigDir
configDirFromAbs f = do
  pResolve f ‚â´ \ case
    AbsD d ‚Üí return $ ConfigDir d
    AbsF f' ‚Üí isDir f' ‚â´ \ case
      ùïø ‚Üí return ‚àò ConfigDir $ toDir f'
      ùï± ‚Üí if basename f' ‚â° [relfile|flake.nix|]
          then return ‚àò ConfigDir $ f' ‚ä£ dirname
          else parse @PathComponent f ‚â´ configDir ‚àò ConfigName

----------------------------------------

mkTargets ‚à∑ (Functor œÜ, Printable œÑ) ‚áí ConfigDir ‚Üí œÜ œÑ ‚Üí œÜ ùïã
mkTargets config_dir attr_paths =
  [fmt|%T#%T|] (unConfigDir config_dir) ‚ä≥ attr_paths

----------------------------------------

msg ‚à∑ ‚àÄ œÑ Œ¥ œÜ Œ∑ . (MonadIO Œ∑, Foldable œÜ, Printable œÑ, ToBriefText œÑ,
                   HasDoMock Œ¥, MonadReader Œ¥ Œ∑, MonadLog (Log MockIOClass) Œ∑) ‚áí
      ùïã ‚Üí œÑ ‚Üí œÜ AttrPath ‚Üí Œ∑ ()
msg verb object attr_paths = do
  let names = sort $ toText ‚àò view AttrPath.pkg ‚ä≥ toList attr_paths
  warn $ [fmt|%t (%t): %L|] verb (toT object) names
  notice $ [fmt|%t: (%T) %L|] verb object attr_paths

----------------------------------------

nixBuild ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                      AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                      AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                      MonadLog (Log MockIOClass) Œº) ‚áí
           ConfigDir ‚Üí NonEmpty AttrPath ‚Üí Œº ()
nixBuild config_dir attr_paths = do
  msg "building" config_dir attr_paths
  let targets = mkTargets config_dir attr_paths
  nixDo ùïπ $ [ "build", "--log-format", "bar-with-logs", "--no-link" ] ‚äï
             (toList targets)

----------------------------------------

nixProfileRemove ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                              AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                              AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                              MonadLog (Log MockIOClass) Œº) ‚áí
                   ProfileDir ‚Üí [AttrPath] ‚Üí Œº ()
nixProfileRemove _ [] = return ()
nixProfileRemove profile attr_paths = do
  msg "removing" profile attr_paths
  nixDo ùïπ $ ["profile", "remove", "--verbose", "--profile", toText profile] ‚äï
             (toText ‚ä≥ attr_paths)

----------------------------------------

nixProfileInstall ‚à∑ ‚àÄ Œµ Œ¥ Œº .
                    (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                     AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                     AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                     MonadLog (Log MockIOClass) Œº) ‚áí
                    ConfigDir ‚Üí ProfileDir ‚Üí ùïÑ Priority‚ÜíNonEmpty AttrPath‚ÜíŒº ()
nixProfileInstall config_dir profile prio_m attr_paths = do
  let verb = maybe "" [fmt| ¬´prio %T¬ª|] prio_m
  msg ("installing" ‚óá verb) (config_dir, profile) (NonEmpty.sort attr_paths)
  let targets = mkTargets config_dir attr_paths
  let extra_args = maybe [] (\ p ‚Üí ["--priority", [fmt|%d|] (unPriority p)])
                         prio_m
  nixDo ùïπ $ —é [ [ "profile", "install", "--profile", toText profile ]
              , extra_args, toList targets ]

----------------------------------------

noMock ‚à∑ ‚àÄ Œ∑ Œ± . ReaderT DoMock Œ∑ Œ± ‚Üí Œ∑ Œ±
noMock = flip runReaderT NoMock

----------------------------------------

partitionMaybes ‚à∑ [(Œ±, ùïÑ Œ≤)] ‚Üí ([Œ±], [(Œ±,Œ≤)])
partitionMaybes = go ([],[])
  where go (naes,yaes) []             = (naes, yaes)
        go (naes,yaes) ((a,ùïπ) : xs)   = go (a:naes, yaes) xs
        go (naes,yaes) ((a,ùïµ b) : xs) = go (naes, (a,b) : yaes) xs

----------------------------------------

checkPackages ‚à∑ ‚àÄ Œµ Œ± Œº .
                (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                 AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
                 AsCreateProcError Œµ, AsProcExitError Œµ, AsNixError Œµ,
                 AsTextualParseError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                (ConfigDir ‚Üí ProfileDir
                           ‚Üí Map.Map (ùïÑ Priority) (NonEmpty AttrPath) ‚Üí Œº ())
              ‚Üí (ConfigDir ‚Üí ProfileDir
                           ‚Üí Map.Map (ùïÑ Priority) (NonEmpty AttrPath) ‚Üí Œº Œ±)
              ‚Üí RemoteState ‚Üí [ConfigName] ‚Üí Packages ‚Üí Œº Word8
checkPackages check go r [] pkgs = checkPackages check go r [configDefault] pkgs
checkPackages check go r cs pkgs = do
  -- targets ‚à∑ [(ConfigDir,ProfileDir,NonEmpty AttrPath)]
  targets ‚Üê collectPackages r cs pkgs
  -- we split into 'check' and 'go' so that we can do pre-emptively make all the
  -- necessary checks before making any destructive changes
  forM_ targets (\ (cd,pd,aps) ‚Üí check cd pd aps)
  forM_ targets (\ (cd,pd,aps) ‚Üí go cd pd aps)
  return 0

----------------------------------------

multiMap ‚à∑ (Foldable œà, Ord Œ∫) ‚áí œà (Œ∫,ŒΩ) ‚Üí Map.Map Œ∫ (NonEmpty ŒΩ)
multiMap = Map.fromListWith (‚óá) ‚àò fmap (second pure) ‚àò toList

----------------------------------------

{-| Find what packages to install.

    Given some config names (desktop, haskell, scripts, etc.) and some package
    names (emacs, audacious, etc.); return a load of tuples of `ConfigDir`
    (source to build from), `ProfileDir` (profile to install to) and `AttrPath`s
    (things to install).

    If a number of packages are requested, they must exist in each specified
    `ConfigDir`.  The use of multiple configs probably makes sense only with
    `AllPackages`.
-}
collectPackages ‚à∑ ‚àÄ Œµ œà Œº .
                  (MonadIO Œº, Traversable œà, MonadLog (Log MockIOClass) Œº,
                   AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
                   AsCreateProcError Œµ, AsProcExitError Œµ, AsNixError Œµ,
                   AsTextualParseError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                  RemoteState ‚Üí œà ConfigName ‚Üí Packages
                ‚Üí Œº (œà (ConfigDir, ProfileDir,
                        Map.Map (ùïÑ Priority) (NonEmpty AttrPath)))

collectPackages r cs pkgs =
  forM cs (\ c ‚Üí do
    config_dir     ‚Üê configDirFromAbs c
    target_profile ‚Üê nixProfileAbsDir (toText $ unConfigName c)

    flkPkgs ‚à∑ FlakePkgs ‚Üê flakeShowNM r config_dir

    pkgs' ‚à∑ NonEmpty Pkg ‚Üê
      case pkgs of
        SomePackages ps ‚Üí return ps
        AllPackages ‚Üí
          case nonEmpty $ x86_64_pkgs flkPkgs of
            ùïπ    ‚Üí throwUsage' $ [fmt|no packages found: %T|] config_dir
            ùïµ ps ‚Üí return ps
    partitionMaybes ‚àò toList ‚ä≥ pkgFindNames' flkPkgs pkgs' ‚â´ \ case
      (missing:[],_) ‚Üí
        throwUsage $ [fmtT|package not found in %T: %T|] c missing
      (missing@(_:_:_),_) ‚Üí
        throwUsage $ [fmtT|packages not found in %T: %L|] c missing
      ([],pkgs'' ‚à∑ [(Pkg,(AttrPath, (ùïÑ Priority)))]) ‚Üí
        case nonEmpty (snd ‚ä≥ pkgs'') of
          ùïµ attr_path_prios ‚Üí do return (config_dir, target_profile,
                                         multiMap $ swap ‚ä≥ attr_path_prios)
          ùïπ ‚Üí
            throwUsage' $ intercalate " " [ "internal error: nonEmpty pkgs'"
                                          , "means this should never happen"])


----------------------------------------

installFromOneConfig ‚à∑
  ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, AsProcExitError Œµ, AsCreateProcError Œµ,
             AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
             HasDoMock Œ¥, MonadReader Œ¥ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
            ConfigDir ‚Üí ProfileDir ‚Üí ùïÑ Priority ‚Üí NonEmpty AttrPath ‚Üí Œº ()

installFromOneConfig config_dir target_profile prio_m attr_paths = do
  profile_manifest ‚Üê noMock $
    readManifestDir Notice target_profile ‚â´ either throwUserError return

  -- pre-remove anything found in the manifest; we're replacing/updating,
  -- rather than adding

  -- we do it this way because nix profile upgrade doesn't work with
  -- our flakes; e.g.,
  {- $ nix profile upgrade --profile \
             /nix/var/nix/profiles/per-user/martyn/haskell \
             /home/martyn/nix/haskell#packages.x86_64-linux.ghc
     warning: '/home/martyn/nix/haskell#packages.x86_64-linux.ghc' \
             does not match any packages
  -}
  -- true even if we use, e.g.,
  -- git+file:///home/martyn/nix/haskell#packages.x86_64-linux.ghc
  -- cited by nix profile list

  -- nix profile install adds a new package without removing the older one

  debug $ [fmt|manifest: %T|] profile_manifest
  info $ [fmt|manifest paths: %L|] (attrPaths profile_manifest)
  info $ [fmt|attr_path_prios: %L|] (toList attr_paths)
  let removals = intersect (attrPaths profile_manifest) (toList attr_paths)
  nixProfileRemove target_profile removals
  nixProfileInstall config_dir target_profile prio_m attr_paths
  return ()

----------------------------------------

configFlakePkgs ‚à∑ ‚àÄ Œµ Œº .
                  (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                   AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                   AsProcExitError Œµ, AsAesonError Œµ, AsTextualParseError Œµ,
                  Printable Œµ, MonadError Œµ Œº) ‚áí
     RemoteState ‚Üí [ConfigDir] ‚Üí Œº [FlakePkgs]
configFlakePkgs r config_dirs = (flakeShowNM r ‚Æû config_dirs)

{-| Given a list of `ConfigDir`, generate a list rows, each representing
    a package from those config dirs.  Each row is:
    name (installation name), pkg (nix package name), pkg version,
    installation priority (if any), src (config dir in which the name/pkg is
    defined), arch (host architecture).
-}
configFlakeTxts ‚à∑ ‚àÄ Œµ Œº .
                  (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                   AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                   AsProcExitError Œµ, AsAesonError Œµ, AsTextualParseError Œµ,
                  Printable Œµ, MonadError Œµ Œº) ‚áí
     RemoteState ‚Üí [ConfigDir] ‚Üí Œº [(ùïã,ùïã,ùïã,ùïã,ùïã,ùïã)]
configFlakeTxts r config_dirs =
  —é ‚ä≥ (namePkgVersPrioSrcArch ‚ä≥‚ä≥ configFlakePkgs r config_dirs)

{-| List all the packages from a given flake -}
mainListPkgs ‚à∑ (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                AsAesonError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
                AsFPathError Œµ, AsIOError Œµ, AsTextualParseError Œµ,
                Printable Œµ, MonadError Œµ Œº, MonadLog (Log MockIOClass) Œº) ‚áí
               RemoteState ‚Üí Configs ‚Üí Œº Word8
mainListPkgs r AllConfigs = allConfigNames ‚â´ mainListPkgs r ‚àò SomeConfigs
mainListPkgs r (SomeConfigs []) = mainListPkgs r (SomeConfigs [configDefault])
mainListPkgs r (SomeConfigs cs) = do
  config_dirs ‚à∑ [ConfigDir] ‚Üê mapM configDirFromAbs cs
  xs ‚Üê sortOn (view _1) ‚ä≥ configFlakeTxts r config_dirs

  let xs' = tupleToList ‚ä≥ xs
  forM_ (columnify [ JustifyLeft, JustifyLeft, JustifyRight,
                     JustifyLeft, JustifyLeft, JustifyLeft ] xs')
                (say ‚àò intercalate "\t")
  return 0

----------------------------------------

myMain ‚à∑ (HasCallStack,
          AsNixError Œµ, AsIOError Œµ, AsFPathError Œµ, AsAesonError Œµ,
          AsCreateProcError Œµ, AsProcExitError Œµ, AsTextualParseError Œµ,
          AsUsageError Œµ, Printable Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain do_mock opts = flip runReaderT do_mock $
  let
    r = opts ‚ä£ remote_state
  in
    case opts ‚ä£ mode of
      ModeListConfigs     ‚Üí allConfigDirs ‚â´ mapM_ say ‚™º return 0
      ModeListConfigNames ‚Üí allConfigNames ‚â´ mapM_ say ‚àò sort ‚™º return 0
      ModeListPkgs cs     ‚Üí mainListPkgs r cs
      ModeInstall cs ps   ‚Üí
        let installFromOneConfigs cd pd =
              mapM_ (uncurry $ installFromOneConfig cd pd) ‚àò Map.toList
            concat' ‚à∑ [NonEmpty Œ±] ‚Üí NonEmpty Œ±
            concat' xs = fromList $ concat (toList ‚ä≥ xs)
        in  checkPackages (\ cd _ aps ‚Üí nixBuild cd (concat' $ Map.elems aps))
                          installFromOneConfigs r cs ps

{-| program main entry point -}
main ‚à∑ MonadIO Œº ‚áí Œº ()
main = do
  let desc = vcat $ [ "manage nix configs for ~home installation", empty ]
  getArgs ‚â´ stdMain desc parseOptions (myMain @NixProgramError)

-- that's all, folks! ----------------------------------------------------------
