{-# LANGUAGE DeriveAnyClass #-}

{-| nyx program to manage local configurations -}
module Nix.Nyx
  ( main )
where

import Base1T

import Debug.Trace  ( trace, traceShow )
import Prelude  ( Int, Integral )

import qualified  Natural

-- aeson -------------------------------

import Data.Aeson  ( FromJSON( parseJSON )
                   , (.:), (.:?)
                   , defaultOptions, eitherDecodeStrict', fieldLabelModifier
                   , genericParseJSON, withObject
                   )

-- base --------------------------------

import Data.Foldable  ( Foldable )
import Data.Function  ( flip )
import Data.Functor   ( Functor )
import Data.List      ( any, filter, maximum )
import GHC.Generics   ( Generic )

-- containers --------------------------

import qualified Data.Map.Strict  as  Map

-- data-textual ------------------------

import Data.Textual  ( Parsed( Malformed, Parsed ), Textual( textual ) )

-- deepseq -----------------------------

import Control.DeepSeq  ( NFData )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir, absdir )
import FPath.AbsFile           ( AbsFile, absfile )
import FPath.AppendableFPath   ( AppendableFPath, AppendableFPathD
                               , AppendableFPathF, (‚´ª) )
import FPath.AsFilePath        ( filepath )
import FPath.Basename          ( basename )
import FPath.Dir               ( DirAs )
import FPath.DirType           ( DirType )
import FPath.Error.FPathError  ( AsFPathError( _FPathError ) )
import FPath.Parseable         ( parse )
import FPath.PathComponent     ( PathComponent )
import FPath.RelDir            ( RelDir, reldir )
import FPath.RelFile           ( RelFile, relfile )
import FPath.ToDir             ( ToDir )
import Text.Read               ( Read )

-- lens --------------------------------

import Control.Lens.Getter  ( view )
import Control.Lens.Tuple   ( _1, _2 )

-- log-plus ----------------------------

import Log  ( Log, logIO )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT, MonadLog, Severity( Informational ) )

-- mockio ------------------------------

import MockIO.DoMock   ( DoMock( NoMock ) )
import MockIO.IOClass  ( HasIOClass, IOClass( IORead, IOWrite ), ioClass )

-- mockio-log --------------------------

import MockIO.Log  ( HasDoMock, MockIOClass
                   , doMock, logResult, mkIOL, mkIOLME, mkIOLMER )

-- mockio-plus -------------------------

import MockIO.Directory          ( lsdir' )
import MockIO.File               ( FExists( FExists ), fexists )
import MockIO.Process            ( Íô´ )
import MockIO.Process.MLCmdSpec  ( MLCmdSpec, mock_value )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( throwUserError )

-- monadio-plus ------------------------

import MonadIO                        ( say )
import MonadIO.Base                   ( getArgs )
import MonadIO.Error.CreateProcError  ( AsCreateProcError( _CreateProcError ) )
import MonadIO.Error.ProcExitError    ( AsProcExitError( _ProcExitError ) )
import MonadIO.Process.ExitInfo       ( ExitInfo )
import MonadIO.Process.ExitStatus     ( evOK )
import MonadIO.User                   ( homePath, getUserName' )

-- mtl ---------------------------------

import Control.Monad.Except  ( throwError )
import Control.Monad.Reader  ( runReaderT )

-- natural -----------------------------

import Natural  ( length, replicate )

-- optparse-applicative ----------------

import Options.Applicative.Builder      ( argument, auto, metavar )
import Options.Applicative.Help.Pretty  ( (<$$>)
                                        , align, empty, fillSep, text, vcat )
import Options.Applicative.Types        ( Parser )

-- optparse-plus -----------------------

import OptParsePlus  ( (‚äû), readT, toDocTs )

-- parsers -----------------------------

import Text.Parser.Char  ( string )

-- stdmain -----------------------------

import StdMain             ( stdMain )
import StdMain.UsageError  ( AsUsageError( _UsageError ), UsageFPathIOError
                           , UsageParseFPProcIOError
                           , UsageParseAesonFPPIOError
                           )

-- text --------------------------------

import Data.Text           ( concat, intercalate, pack, unpack )
import Data.Text.Encoding  ( encodeUtf8 )

-- textual-plus ------------------------

import qualified TextualPlus

import TextualPlus.Error.TextualParseError
               ( AsTextualParseError( _TextualParseError ), TextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified  Nix.Paths  as  Paths

import Data.Aeson.Error  ( AesonError, AsAesonError( _AesonError )
                         , throwAsAesonError )

import Nix.Flake  ( FlakePkgs, forX86_64Pkg, forMX86_64Pkg, forMX86_64Pkg_, pkg
                  , ver, x86_64, x86_64_ )
import Nix.Types  ( Arch, Pkg, Ver, pkgRE )

--------------------------------------------------------------------------------

------------------------------------------------------------

newtype ProfileName = ProfileName { unProfileName ‚à∑ PathComponent }

userProfileName ‚à∑ ‚àÄ Œµ Œº .
              (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
              Œº ProfileName
userProfileName = ProfileName ‚ä≥ (getUserName' ‚â´ parse)

userProfileNameRelDir ‚à∑ ‚àÄ Œµ Œº .
                        (MonadIO Œº,
                         AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
                        Œº RelDir
userProfileNameRelDir = (fromList ‚àò pure ‚àò unProfileName) ‚ä≥ userProfileName

------------------------------------------------------------

data Mode = ModeShowConfigs

instance Printable Mode where

instance Textual Mode where
  textual = string "show-configs" ‚ã´ pure ModeShowConfigs

data Options = Options { mode ‚à∑ Mode }

----------------------------------------

{-| cmdline options parser -}
parseOptions ‚à∑ Parser Options
parseOptions = Options ‚ä≥ argument readT (metavar "MODE")

------------------------------------------------------------

{-| top dir to look for config flakes -}
configTop ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí Œº AbsDir
configTop = homePath [reldir|nix/|]

----------------------------------------

{-| top dir where nix profiles are stored -}
profilesTop ‚à∑ (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
              Œº AbsDir
profilesTop =
  ([absdir|/nix/var/nix/profiles/per-user/|] ‚´ª) ‚ä≥ userProfileNameRelDir

----------------------------------------

{-| append a profile name to a dir to find a profile dir -}
profileAppend ‚à∑ AbsDir ‚Üí ProfileName ‚Üí AbsDir
profileAppend top = (top ‚´ª) ‚àò fromList ‚àò pure ‚àò unProfileName

----------------------------------------

{-| find a profile dir from a profile name, assuming the use of `profilesTop` -}
profileDir ‚à∑ (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
             ProfileName ‚Üí Œº AbsDir
profileDir = (profilesTop ‚ä≤) ‚àò flip profileAppend

----------------------------------------

{-| A variant of `lsdir'` that just returns the subdirectories.  For complex
    type issues that I do not grok; it only works for `AbsDir`. -}
subdirs ‚à∑ ‚àÄ Œµ œâ Œº .
          (MonadIO Œº,
           AsFPathError Œµ,AsIOError Œµ,Printable Œµ,MonadError Œµ Œº,HasCallStack,
           HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
          Severity ‚Üí AbsDir ‚Üí DoMock ‚Üí Œº [AbsDir]
subdirs sv d k = fst ‚ä≥‚ä≥ snd ‚ä≥ lsdir' @_ @AbsFile sv d k

{-| list of config directories; that is, dirs in `configTop` that contain a
    @flake.nix@ -}
allConfigDirs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [AbsDir]
allConfigDirs = do
  config_top  ‚Üê configTop
  config_dirs ‚Üê
    let has_flake ‚à∑ (MonadIO Œº,
                     AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                     HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                    AbsDir ‚Üí Œº ùîπ
        has_flake d  = do
          (fs,_) ‚Üê lsdir' @_ @AbsFile Informational d NoMock
          return $ any (\ (fn, _) ‚Üí [relfile|flake.nix|] ‚â° basename fn) fs
    in  subdirs Informational config_top NoMock ‚â´ filterM has_flake
  return $ config_dirs

{-| list of config flakes -}

allConfigs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [AbsFile]
allConfigs = do
  config_top  ‚Üê configTop
  let subdirs_ d = subdirs Informational d NoMock
      fexists_ f = (FExists ‚â°) ‚ä≥ fexists Informational FExists f NoMock
  proto_flakes ‚Üê (‚´ª [relfile|flake.nix|]) ‚ä≥‚ä≥ subdirs_ config_top
  flakes ‚Üê (return proto_flakes) ‚â´ filterM fexists_
  return $ flakes

flakeShowTestInput =
  concat [ "{ \"packages\": {"
         , "    \"x86_64-linux\": {"

         , "      \"binutils\": {"
         , "        \"description\": \"Tools for manipulating binaries\","
         , "        \"name\": \"binutils-wrapper-2.38\","
         , "        \"type\": \"derivation\""
         , "      },"

         , "      \"get-iplayer-config\": {"
         , "        \"name\": \"get-iplayer-config\","
         , "        \"type\": \"derivation\""
         , "      },"

         , "      \"graph-easy\": {"
         , "        \"description\": \"Render/convert graphs\","
         , "        \"name\": \"perl5.34.1-Graph-Easy-0.76\","
         , "        \"type\": \"derivation\""
         , "      }"

         , "    }"
         , "  }"
         , "}"
         ]

-- nix flake show #flake
nix_flake_show flake =
  Íô´ (Paths.nix, ["flake", "show", "--json", pack $ flake ‚´• filepath],
     ((\ f ‚Üí f & mock_value ‚ä¢ (evOK,flakeShowTestInput)) ‚à∑ MLCmdSpec ùïã ‚Üí MLCmdSpec ùïã)
    )

myMain ‚à∑ ‚àÄ Œµ . (HasCallStack,
                AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ, AsAesonError Œµ, Printable Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain do_mock _ = flip runReaderT do_mock $ do
  allConfigs ‚â´ mapM_ say
  (_,(stdout‚à∑ùïã)) ‚Üê nix_flake_show [absdir|/home/martyn/nix/default/|]
-- N-COLUMN DISPLAY
  xs' ‚Üê case eitherDecodeStrict' @FlakePkgs (encodeUtf8 stdout) of
          ùïΩ pkgs ‚Üí return ‚àò Map.toList $ Map.map (\ fp ‚Üí (fp ‚ä£ pkg, fp ‚ä£ ver)) $ pkgs ‚ä£ x86_64_
          ùï∑ e    ‚Üí throwAsAesonError e
  let max_l ‚à∑ (Foldable œà, Functor œà, Printable Œ±) ‚áí (Œ≤ ‚Üí Œ±) ‚Üí œà Œ≤ ‚Üí ‚Ñï
      max_l f = maximum ‚àò fmap  (length ‚àò toText ‚àò f)
      fromIntegral0 ‚à∑ Integral Œ± ‚áí Œ± ‚Üí ‚Ñï
      fromIntegral0 a | a < 0     = 0
                      | otherwise = fromIntegral a
      p_l ‚à∑ ‚Ñï = maximum ((length ‚àò toText ‚àò view _1) ‚ä≥ xs')
      pad_p t =
        t ‚äï replicate @ùïã (p_l - length t) ' '
      p'_l ‚à∑ ‚Ñï = maximum ((length ‚àò toText ‚àò view (_2 ‚àò _1)) ‚ä≥ xs')
      pad_p' t =
        t ‚äï replicate @ùïã (p'_l - length t) ' '
  let sprint_ppv (p,(p',v)) =
        [fmtT|%T\t%T\t%T|] (pad_p $ toText p) (pad_p' $ toText p')
                           (maybe "" toText v)
  forM_ xs' (say ‚àò sprint_ppv)
  return 0

{-| program main entry point -}
main ‚à∑ MonadIO Œº ‚áí Œº ()
main = do
-- ?add logging options
-- show all configs (as option)
  let progDesc =
        -- the values of show_configs, etc., will be wrapped as necessary
        let show_configs = fillSep [ toDocTs [ "show the location of configs"] ]
        in vcat [ "manage nix configs for ~home installation\n\nModes:"
                , empty <$$> text "show-configs" ‚äû align show_configs ]
  getArgs ‚â´ stdMain progDesc parseOptions (myMain {- @UsageParseFPProcIOError -} @UsageParseAesonFPPIOError)

-- that's all, folks! ----------------------------------------------------------
