{-# LANGUAGE UnicodeSyntax #-}
{-| Interface to `nix`, the executable -}
module Nix.NixExe
  ( nixBuild
  , nixFlakeShow
  , nixProfileInstall
  , nixProfileRemove
  ) where

import Base1T

-- aeson-plus --------------------------

import Data.Aeson       ( eitherDecodeStrict' )
import Data.Aeson.Error ( AsAesonError, throwAsAesonError )
import Data.List        ( sort )

-- base --------------------------------

import Data.List.NonEmpty qualified as NonEmpty

import Data.Foldable ( Foldable )
import Data.Functor  ( Functor )

-- env-plus ----------------------------

import Env.Types ( EnvModFrag, ”ô, ”≠ )

-- fpath -------------------------------

import FPath.AbsFile          ( AbsFile )
import FPath.AsFilePath       ( filepath )
import FPath.Error.FPathError ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter ( view )

-- log-plus ----------------------------

import Log ( Log )

-- logging-effect ----------------------

import Control.Monad.Log ( MonadLog )

-- mockio ------------------------------

import MockIO.DoMock ( HasDoMock )

-- mockio-log --------------------------

import MockIO.Log             ( MockIOClass )
import MockIO.Log.MonadReader ( notice, warn )

-- mockio-plus -------------------------

import MockIO.Process               ( Íô© )
import MockIO.Process.MLCmdSpec     ( MLCmdSpec, ToMLCmdSpec, mock_value )
import MockIO.Process.OutputDefault ( OutputDefault )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError ( AsCreateProcError )
import MonadIO.Error.ProcExitError   ( AsProcExitError )
import MonadIO.Process.ExitStatus    ( ExitStatus, evOK )
import MonadIO.Process.MakeProc      ( MakeProc )
import MonadIO.Process.OutputHandles ( OutputHandles )
import MonadIO.Process.ToMaybeTexts  ( ToMaybeTexts )

-- mtl ---------------------------------

import Control.Monad.Reader ( MonadReader )

-- text --------------------------------

import Data.Text          ( pack )
import Data.Text.Encoding ( encodeUtf8 )

-- textual-plus ------------------------

import TextualPlus.Error.TextualParseError ( AsTextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Paths          qualified as Paths
import Nix.Types.AttrPath qualified as AttrPath

import Nix.Types             ( Priority(unPriority), ProfileDir, RemoteState,
                               remoteArgs )
import Nix.Types.AttrPath    ( AttrPath )
import Nix.Types.ConfigDir   ( ConfigDir(unConfigDir) )
import Nix.Types.FlakePkgs   ( FlakePkgs(FlakePkgs), flakeShowTestInput )
import Nix.Types.ToBriefText ( ToBriefText(toT) )

--------------------------------------------------------------------------------

nixDo ‚à∑ ‚àÄ Œµ Œ± Œ¥ Œ∂ œÜ Œº .
        (MonadIO Œº, Foldable œÜ, MonadReader Œ¥ Œº, HasDoMock Œ¥,
         AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
         Printable Œµ, MonadError Œµ Œº,
         MakeProc Œ∂, OutputDefault Œ±, ToMaybeTexts Œ±, OutputHandles Œ∂ Œ±,
         ToMLCmdSpec (AbsFile,[ùïã],[EnvModFrag]) Œ±,
         ToMLCmdSpec (AbsFile,[ùïã],[EnvModFrag],(MLCmdSpec Œ± ‚Üí MLCmdSpec Œ±)) Œ±,
         MonadLog (Log MockIOClass) Œº) ‚áí
        (ùïÑ (MLCmdSpec Œ± ‚Üí MLCmdSpec Œ±)) ‚Üí œÜ ùïã ‚Üí Œº Œ±

nixDo ùïπ args = snd ‚ä≥ Íô© (Paths.nix, toList args, [”≠ (”ô "NIX_CONFIG")])
nixDo (ùïµ mock_set) args =
  snd ‚ä≥ Íô© (Paths.nix, toList args, [”≠ (”ô "NIX_CONFIG")], mock_set)

----------------------------------------

mkTargets ‚à∑ (Functor œÜ, Printable œÑ) ‚áí ConfigDir ‚Üí œÜ œÑ ‚Üí œÜ ùïã
mkTargets config_dir attr_paths =
  [fmt|%T#%T|] (unConfigDir config_dir) ‚ä≥ attr_paths

----------------------------------------

msg ‚à∑ ‚àÄ œÑ Œ¥ œÜ Œ∑ . (MonadIO Œ∑, Foldable œÜ, Printable œÑ, ToBriefText œÑ,
                   HasDoMock Œ¥, MonadReader Œ¥ Œ∑, MonadLog (Log MockIOClass) Œ∑) ‚áí
      ùïã ‚Üí œÑ ‚Üí œÜ AttrPath ‚Üí Œ∑ ()
msg verb object attr_paths = do
  let names = sort $ toText ‚àò view AttrPath.pkg ‚ä≥ toList attr_paths
  warn $ [fmt|%t (%t): %L|] verb (toT object) names
  notice $ [fmt|%t: (%T) %L|] verb object attr_paths

----------------------------------------

nixBuild ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                      AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                      AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                      MonadLog (Log MockIOClass) Œº) ‚áí
           RemoteState ‚Üí ConfigDir ‚Üí NonEmpty AttrPath ‚Üí Œº ()
nixBuild r config_dir attr_paths = do
  msg "building" config_dir attr_paths
  let targets = mkTargets config_dir attr_paths
  nixDo ùïπ $ —é [ [ "build", "--log-format", "bar-with-logs", "--no-link" ]
              , remoteArgs r, toList targets ]

----------------------------------------

nixProfileRemove ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                              AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                              AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                              MonadLog (Log MockIOClass) Œº) ‚áí
                   RemoteState ‚Üí ProfileDir ‚Üí [AttrPath] ‚Üí Œº ()
nixProfileRemove _ _ [] = return ()
nixProfileRemove r profile attr_paths = do
  msg "removing" profile attr_paths
  nixDo ùïπ $ —é [ [ "profile", "remove", "--verbose", "--profile", toText profile]
              , remoteArgs r, toText ‚ä≥ attr_paths ]

----------------------------------------

nixProfileInstall ‚à∑ ‚àÄ Œµ Œ¥ Œº .
                    (MonadIO Œº, MonadReader Œ¥ Œº, HasDoMock Œ¥,
                     AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                     AsProcExitError Œµ, Printable Œµ, MonadError Œµ Œº,
                     MonadLog (Log MockIOClass) Œº) ‚áí
                    RemoteState ‚Üí ConfigDir ‚Üí ProfileDir
                  ‚Üí ùïÑ Priority‚ÜíNonEmpty AttrPath‚ÜíŒº ()
nixProfileInstall r config_dir profile prio_m attr_paths = do
  let verb = maybe "" [fmt| ¬´prio %T¬ª|] prio_m
  msg ("installing" ‚óá verb) (config_dir, profile) (NonEmpty.sort attr_paths)
  let targets = mkTargets config_dir attr_paths
  let extra_args = maybe [] (\ p ‚Üí ["--priority", [fmt|%d|] (unPriority p)])
                         prio_m
  nixDo ùïπ $ —é [ [ "profile", "install", "--profile", toText profile ]
              , remoteArgs r
              , extra_args, toList targets ]

----------------------------------------

{-| nix flake show #flake.  Note that this doesn't handle priorities. -}
nixFlakeShow ‚à∑ ‚àÄ Œµ Œ¥ Œº .
               (MonadIO Œº, HasDoMock Œ¥, MonadReader Œ¥ Œº,
                AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                AsTextualParseError Œµ, AsProcExitError Œµ, AsAesonError Œµ,
                Printable Œµ, MonadError Œµ Œº,
                MonadLog (Log MockIOClass) Œº) ‚áí
               RemoteState ‚Üí ConfigDir ‚Üí Œº FlakePkgs
nixFlakeShow r d = do
  let eAsAesonError ‚à∑ (Printable œÑ,AsAesonError Œµ,MonadError Œµ Œ∑) ‚áí ùîº œÑ Œ≤ ‚Üí Œ∑ Œ≤
      eAsAesonError = either throwAsAesonError return
      mock_set ‚à∑ MLCmdSpec ùïã ‚Üí MLCmdSpec ùïã
      mock_set = let mock_val ‚à∑ (ExitStatus, ùïã) = (evOK, flakeShowTestInput)
                 in  (& mock_value ‚ä¢ mock_val)
      args     = —é [ ["flake", "show", "--json" ]
                   , remoteArgs r
                   , [ pack $ (unConfigDir d) ‚´• filepath ] ]
  flake_show ‚Üê nixDo (ùïµ mock_set) args
  eAsAesonError (FlakePkgs d ‚ä≥ eitherDecodeStrict' (encodeUtf8 flake_show))

-- that's all, folks! ----------------------------------------------------------
