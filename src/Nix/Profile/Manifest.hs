{-| work with nix `manifest.json` files -}

module Nix.Profile.Manifest
  ( Manifest, ManifestElement, elementsi, getNameVerPath, readManifest )
where

import Base1T

-- aeson -------------------------------

import Data.Aeson  ( FromJSON, eitherDecodeFileStrict' )

-- base --------------------------------

import qualified  Data.List.NonEmpty  as  NonEmpty

import Data.List     ( zip )
import GHC.Generics  ( Generic )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.AsFilePath        ( filepath )
import FPath.AbsFile           ( AbsFile )
import FPath.AppendableFPath   ( (‚´ª) )
import FPath.Dir               ( Dir( DirA, DirR ) )
import FPath.Error.FPathError  ( AsFPathError )
import FPath.Parseable         ( parseDir )
import FPath.RelDir            ( reldir )
import FPath.RelFile           ( relfile )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity( Informational ) )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock( NoMock ), HasDoMock )

-- mockio-log --------------------------

import MockIO.IOClass  ( HasIOClass )

-- mockio-plus -------------------------

import MockIO.File  ( fexists )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( throwUserError )

-- monadio-plus ------------------------

import MonadIO.FStat  ( FExists( FExists, NoFExists ) )
import MonadIO.User   ( homePath )

-- more-unicode ------------------------

import Data.MoreUnicode.Monad  ( (‚ãò) )

-- textual-plus ------------------------

import TextualPlus                         ( tparse )
import TextualPlus.Error.TextualParseError ( TextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Profile.AttrPath   ( apPkg )
import Nix.Profile.StorePath  ( spPkgVerPath )
import Nix.Types              ( Pkg, Ver )

--------------------------------------------------------------------------------

{-| An individual element of a profile manifest -}
data ManifestElement = ManifestElement { active      ‚à∑ ùîπ
                                       , priority    ‚à∑ ‚Ñï
                                       , storePaths  ‚à∑ NonEmpty ùïä
                                       , attrPath    ‚à∑ ùïÑ ùïä
                                       , originalURL ‚à∑ ùïÑ ùïä
                                       , url         ‚à∑ ùïÑ ùïä
                                       }
  deriving (Generic, Show)

instance FromJSON ManifestElement

------------------------------------------------------------

{-| A profile manifest, read from a `manifest.json` file -}
data Manifest = Manifest { version ‚à∑ ‚Ñ§, elements ‚à∑ [ManifestElement] }
  deriving (Generic, Show)

instance FromJSON Manifest

------------------------------------------------------------

nixProfile ‚à∑ (AsIOError Œµ,AsFPathError Œµ,MonadError Œµ Œº,MonadIO Œº) ‚áí Œº AbsDir
nixProfile = homePath [reldir|.nix-profile/|]

----------------------------------------

nixProfiles ‚à∑ (AsIOError Œµ,AsFPathError Œµ,MonadError Œµ Œº,MonadIO Œº) ‚áí Œº AbsDir
nixProfiles = homePath [reldir|.nix-profiles/|]

------------------------------------------------------------

{-| Given a profile name, return the manifest filepath.  If the name is the
    empty string, return the default profile (~/.nix-profile) -}
profileManifest ‚à∑ ‚àÄ Œµ œÑ œâ Œº .
                  (AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
                   HasIOClass œâ, HasDoMock œâ, Default œâ, MonadLog (Log œâ) Œº,
                   Printable œÑ, MonadIO Œº) ‚áí
                  œÑ ‚Üí Œº AbsFile
profileManifest (toText ‚Üí d) = do
  dir ‚Üê if d ‚â° ""
        then nixProfile
        else parseDir d ‚â´ \ case
             DirR d' ‚Üí nixProfiles ‚ä≤ (‚´ª d')
             DirA d' ‚Üí return d'

  fexists Informational FExists dir NoMock ‚â´ \ case
    NoFExists ‚Üí throwUserError $ [fmtT|No such profile dir '%T'|] dir
    FExists   ‚Üí let manifest_json = [relfile|manifest.json|]
                    manifest      = dir ‚´ª manifest_json
                in  fexists Informational FExists manifest NoMock ‚â´ \ case
                      FExists   ‚Üí return manifest
                      NoFExists ‚Üí throwUserError $
                                    [fmtT|profile dir '%T' lacks a %T|]
                                    dir manifest_json

----------------------------------------

{-| Given a name (e.g., "default", or "desktop"; or the empty string meaning the
    default profile from ~/.nix-profile/; read the `manifest.json` file for that
    profile.
 -}
readManifest ‚à∑ ‚àÄ Œµ œÑ œâ Œº .
               (AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
                HasIOClass œâ, HasDoMock œâ, Default œâ, MonadLog (Log œâ) Œº,
                Printable œÑ, MonadIO Œº) ‚áí
               œÑ ‚Üí Œº (Either ùïä Manifest)
readManifest =
  liftIO ‚àò eitherDecodeFileStrict' ‚àò (‚´• filepath) ‚ãò profileManifest

----------------------------------------

{-| elements in a manifest, along with a zero-based index -}
elementsi ‚à∑ Manifest ‚Üí [(‚Ñï,ManifestElement)]
elementsi m = zip [0..] (elements m)

----------------------------------------

{-| extract the name, version & path from @ManifestElement@ -}
getNameVerPath ‚à∑ (MonadError TextualParseError Œ∑) ‚áí
                 ManifestElement ‚Üí Œ∑ (Pkg, ùïÑ Ver, AbsDir)
getNameVerPath e = do
  (pkgs,ver,path) ‚Üê spPkgVerPath ‚ä≥ tparse (NonEmpty.head $ storePaths e)
  case attrPath e of
    ùïµ ap ‚Üí (,ver,path) ‚ä≥ apPkg ap
    ùïπ    ‚Üí return (pkgs,ver,path)

-- that's all, folks! ----------------------------------------------------------
