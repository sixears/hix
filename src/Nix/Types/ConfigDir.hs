{-# LANGUAGE UnicodeSyntax #-}
module Nix.Types.ConfigDir
  ( ConfigDir(ConfigDir, unConfigDir)
  , allConfigDirs
  , allConfigNames
  , configDir
  , configDirFromAbs
  , configDirName
  , configNameFromDir
  , configTop
  ) where

import Base1T

import Prelude ( error )

-- base --------------------------------

import Data.List ( any )

-- fpath -------------------------------

import FPath.Abs              ( Abs(AbsD, AbsF) )
import FPath.AbsDir           ( AbsDir )
import FPath.AbsFile          ( AbsFile )
import FPath.AppendableFPath  ( (‚´ª) )
import FPath.Basename         ( Basename, basename )
import FPath.Dir              ( DirAs )
import FPath.Dirname          ( dirname )
import FPath.Error.FPathError ( AsFPathError )
import FPath.Parseable        ( Parseable(parse) )
import FPath.PathComponent    ( PathComponent )
import FPath.RelDir           ( reldir )
import FPath.RelFile          ( relfile )
import FPath.RelType          ( RelType )
import FPath.ToDir            ( ToDir(toDir) )

-- log-plus ----------------------------

import Log ( Log )

-- logging-effect ----------------------

import Control.Monad.Log ( MonadLog, Severity(Informational) )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock(NoMock), HasDoMock )
import MockIO.IOClass ( HasIOClass )

-- mockio-plus -------------------------

import MockIO.Directory ( lsdir', subdirs )

-- monadio-plus ------------------------

import MonadIO.FPath ( pResolve )
import MonadIO.FStat ( isDir )
import MonadIO.User  ( homePath )

-- mono-traversable --------------------

import Data.MonoTraversable ( Element, MonoFoldable, otoList )

-- safe --------------------------------

import Safe ( lastMay )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Nix.Types.ConfigName  ( ConfigName(ConfigName, unConfigName) )
import Nix.Types.ToBriefText ( ToBriefText(toT) )

--------------------------------------------------------------------------------

newtype ConfigDir = ConfigDir { unConfigDir :: AbsDir }
  deriving (Printable, Show)

instance ToBriefText ConfigDir where
  toT = toT ‚àò configDirName

------------------------------------------------------------

{-| top dir to look for config flakes -}
configTop ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
            Œº AbsDir
configTop = homePath [reldir|nix/|]

----------------------------------------

{-| list of config directories; that is, dirs in `configTop` that contain a
    @flake.nix@ -}
allConfigDirs ‚à∑ (MonadIO Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
              AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
             Œº [ConfigDir]
allConfigDirs = do
  config_top  ‚Üê configTop
  let has_flake ‚à∑ (MonadIO Œº,
                   AsFPathError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                   HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                  AbsDir ‚Üí Œº ùîπ
      has_flake d  = do
        (fs,_) ‚Üê lsdir' @_ @AbsFile Informational d NoMock
        return $ any (\ (fn, _) ‚Üí [relfile|flake.nix|] ‚â° basename fn) fs
  ConfigDir ‚ä≥‚ä≥ (subdirs Informational config_top NoMock ‚â´ filterM has_flake)

----------------------------------------

allConfigNames ‚à∑ (MonadIO Œº,
                  HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº,
                  AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                 Œº [ConfigName]
allConfigNames = configDirName ‚ä≥‚ä≥ allConfigDirs

----------------------------------------

configDirName ‚à∑ ConfigDir ‚Üí ConfigName
configDirName = configNameFromDir ‚àò unConfigDir

----------------------------------------

configNameFromDir ‚à∑ (DirAs Œ¥, Element (RelType Œ¥) ~ PathComponent,
                     MonoFoldable (RelType Œ¥), Basename Œ¥) ‚áí Œ¥ ‚Üí ConfigName
configNameFromDir d = case lastMay ‚àò otoList $ basename d of
                        ùïπ   ‚Üí error $ [fmt|could not find ConfigName of %T|] d
                        ùïµ p ‚Üí ConfigName p

----------------------------------------

configDir ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
            ConfigName ‚Üí Œº ConfigDir
configDir p = ConfigDir ‚ä≥ ((‚´ª fromList [unConfigName p]) ‚ä≥ configTop)

----------------------------------------

{- | Given the name of a config (e.g., "haskell"); find the flake directory for
     that config (e.g., ~/nix/haskell/).

     If f is a file type then if it is a dir on disc convert it else issue a
     warning and use the base dir; if f is a dir, use that.
-}

configDirFromAbs ‚à∑ (MonadIO Œº, Printable Œµ,
                    AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº)‚áí
                   ConfigName ‚Üí Œº ConfigDir
configDirFromAbs f = do
  pResolve f ‚â´ \ case
    AbsD d ‚Üí return $ ConfigDir d
    AbsF f' ‚Üí isDir f' ‚â´ \ case
      ùïø ‚Üí return ‚àò ConfigDir $ toDir f'
      ùï± ‚Üí if basename f' ‚â° [relfile|flake.nix|]
          then return ‚àò ConfigDir $ f' ‚ä£ dirname
          else parse @PathComponent f ‚â´ configDir ‚àò ConfigName

-- that's all, folks! ----------------------------------------------------------
