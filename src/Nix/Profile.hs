{-# LANGUAGE UnicodeSyntax #-}
module Nix.Profile
  ( AsProfileDir(..)
  ) where

import Base1T

-- base --------------------------------

import Data.Function ( flip )

-- fpath -------------------------------

import FPath.AbsDir           ( AbsDir, absdir )
import FPath.AppendableFPath  ( (‚´ª) )
import FPath.Dir              ( Dir(DirA, DirR) )
import FPath.Error.FPathError ( AsFPathError )
import FPath.Parseable        ( parse, parseDir )
import FPath.PathComponent    ( PathComponent, pc )
import FPath.RelDir           ( RelDir, reldir )
import FPath.RelFile          ( RelFile )
import FPath.ToDir            ( toDir )

-- monadio-plus ------------------------

import MonadIO.FPath ( pResolve )
import MonadIO.User  ( getUserName', homePath )

-- non-empty-containers ----------------

import NonEmptyContainers.IsNonEmpty ( fromNonEmpty )

-- text --------------------------------

import Data.Text qualified

--------------------------------------------------------------------------------

{-| where to find per-user profiles on a nix-enabled host -}
perUserProfiles ‚à∑ AbsDir
perUserProfiles = [absdir|/nix/var/nix/profiles/per-user/|]

{- | user name, as a `ProfileName` -}
userProfileName ‚à∑ ‚àÄ Œµ Œº .
              (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
              Œº ProfileName
userProfileName = ProfileName ‚ä≥ (getUserName' ‚â´ parse)

userProfileNameRelDir ‚à∑ ‚àÄ Œµ Œº .
                        (MonadIO Œº,
                         AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
                        Œº RelDir
userProfileNameRelDir = (fromList ‚àò pure ‚àò unProfileName) ‚ä≥ userProfileName

{-| top dir where nix profiles are stored -}
profilesTop ‚à∑ (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
              Œº AbsDir
profilesTop = (perUserProfiles ‚´ª) ‚ä≥ userProfileNameRelDir

----------------------------------------

{-| append a profile name to a dir to find a profile dir -}
profileAppend ‚à∑ AbsDir ‚Üí ProfileName ‚Üí AbsDir
profileAppend top = (top ‚´ª) ‚àò fromList ‚àò pure ‚àò unProfileName

----------------------------------------

{-| find a profile dir from a profile name, assuming the use of `profilesTop` -}
profileDir ‚à∑ (MonadIO Œº,AsIOError Œµ,AsFPathError Œµ,Printable Œµ,MonadError Œµ Œº)‚áí
             ProfileName ‚Üí Œº AbsDir
profileDir = (profilesTop ‚ä≤) ‚àò flip profileAppend

----------------------------------------

{-| Where we expect to find local symlinks to nix profiles. -}
homeNixProfiles ‚à∑ (AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí
                  Œº AbsDir
homeNixProfiles = homePath [reldir|.nix-profiles/|]

------------------------------------------------------------

newtype ProfileName = ProfileName { unProfileName :: PathComponent }
  deriving (Printable)

------------------------------------------------------------

class AsProfileDir Œ± where
  {-| The one true dir for a profile, found under `/nix`. -}
  nixProfileAbsDir ‚à∑ Œ± ‚Üí (MonadIO Œº, AsFPathError Œµ, AsIOError Œµ,
                          Printable Œµ, MonadError Œµ Œº) ‚áí
                     Œº AbsDir
  {-| The dir for a profile, found under `~/.nix-profiles` -}
  nixProfileLocalDir ‚à∑ (MonadIO Œº, AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº)‚áí
                       Œ± ‚Üí Œº AbsDir

--------------------

instance AsProfileDir ProfileName where
  nixProfileAbsDir p = profileDir p

  nixProfileLocalDir p =
    homeNixProfiles ‚ä≤ (‚´ª fromNonEmpty (pure $ unProfileName p))

--------------------

defaultAbsProfile ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, MonadError Œµ Œº,
                             AsIOError Œµ, AsFPathError Œµ, Printable Œµ) ‚áí
                    Œº AbsDir
defaultAbsProfile = profileDir (ProfileName [pc|profile|])
defaultLocalProfile ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, MonadError Œµ Œº,
                               AsIOError Œµ, AsFPathError Œµ) ‚áí
                      Œº AbsDir
defaultLocalProfile = homePath [reldir|.nix-profile/|]

instance AsProfileDir (ùïÑ ùïã) where
  nixProfileAbsDir ùïπ = defaultAbsProfile
  nixProfileAbsDir (ùïµ "") = defaultAbsProfile
  nixProfileAbsDir (ùïµ p) = do
    userName ‚Üê getUserName' ‚â´ parseDir ‚àò toText
    case (‚â° '/') `Data.Text.find` p of
      ùïπ   ‚Üí do n ‚Üê parse @RelFile p
               return $ perUserProfiles ‚´ª userName ‚´ª toDir n
      ùïµ _ ‚Üí pResolve p

  nixProfileLocalDir ùïπ = defaultLocalProfile
  nixProfileLocalDir (ùïµ "") = defaultLocalProfile
  nixProfileLocalDir (ùïµ p) = parseDir p ‚â´ \ case
    DirR p' ‚Üí homeNixProfiles ‚ä≤ (‚´ª p')
    DirA p' ‚Üí return p'

-- that's all, folks! ----------------------------------------------------------
